"use strict";
// Copyright 2019 JS Foundation and other contributors
// Copyright 2024 YANDEX LLC
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDuration = void 0;
var utils_1 = require("../utils/utils");
var duration_1 = require("./duration");
var normalize_1 = require("./normalize");
var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]+)?)?S)?)?$/;
function createDuration(amount, unit, options) {
    if (options === void 0) { options = {}; }
    var duration = {};
    var match = null;
    var lang = (unit && typeof unit === 'object' ? unit : options).lang;
    var durationUnit = typeof unit === 'string' ? unit : 'milliseconds';
    if ((0, duration_1.isDuration)(amount)) {
        return amount;
    }
    else if (!isNaN(Number(amount))) {
        duration[durationUnit] = Number(amount);
    }
    else if (typeof amount === 'string' && (match = isoRegex.exec(amount))) {
        var sign = match[1] === '-' ? -1 : 1;
        var secondsSign = match[8] && match[8][0] === '-' ? -1 : 1;
        duration = (0, normalize_1.removeZeros)({
            y: parseIso(match[2]) * sign,
            M: parseIso(match[3]) * sign,
            w: parseIso(match[4]) * sign,
            d: parseIso(match[5]) * sign,
            h: parseIso(match[6]) * sign,
            m: parseIso(match[7]) * sign,
            s: parseIso(match[8]) * sign,
            ms: Math.floor(parseIso(match[9] ? "0.".concat(match[9]) : match[9]) * 1000) *
                secondsSign *
                sign,
        });
    }
    else if (amount && typeof amount === 'object') {
        duration = amount;
    }
    else {
        throw new Error("Unknown duration: ".concat(amount));
    }
    return new duration_1.DurationImpl({
        values: (0, utils_1.normalizeDateComponents)(duration, utils_1.normalizeDurationUnit),
        locale: lang,
    });
}
exports.createDuration = createDuration;
function parseIso(inp) {
    var res = inp ? parseFloat(inp.replace(',', '.')) : 0;
    return isNaN(res) ? 0 : res;
}
