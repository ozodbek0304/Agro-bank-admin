"use strict";
// Copyright 2019 JS Foundation and other contributors
// Copyright 2024 YANDEX LLC
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDuration = exports.DurationImpl = void 0;
var dateTime_1 = require("../dateTime");
var settings_1 = require("../settings");
var utils_1 = require("../utils");
var locale_1 = require("../utils/locale");
var createDuration_1 = require("./createDuration");
var normalize_1 = require("./normalize");
var IS_DURATION = Symbol('isDuration');
var DurationImpl = /** @class */ (function () {
    function DurationImpl(options) {
        this[_a] = true;
        this._values = options.values;
        this._locale = options.locale || settings_1.settings.getLocale();
        this._isValid = options.isValid || true;
    }
    DurationImpl.isDuration = function (o) {
        return (typeof o === 'object' && o && IS_DURATION in o && o[IS_DURATION] === true) || false;
    };
    DurationImpl.prototype.get = function (unit) {
        if (!this.isValid()) {
            return NaN;
        }
        var name = (0, utils_1.normalizeDurationUnit)(unit);
        return this._values[name] || 0;
    };
    DurationImpl.prototype.set = function (values) {
        if (!this.isValid()) {
            return this;
        }
        var newValues = __assign(__assign({}, this._values), (0, utils_1.normalizeDateComponents)(values, utils_1.normalizeDurationUnit));
        return new DurationImpl({ values: newValues, locale: this._locale });
    };
    DurationImpl.prototype.as = function (unit) {
        if (!this.isValid()) {
            return NaN;
        }
        var name = (0, utils_1.normalizeDurationUnit)(unit);
        // handle milliseconds separately because of floating point math errors
        var days = this.days() +
            this.weeks() * 7 +
            this.hours() / 24 +
            this.minutes() / 1440 +
            this.seconds() / 86400;
        var months = this.months() + this.quarters() * 3 + this.years() * 12;
        var milliseconds = this.milliseconds();
        if (name === 'months' || name === 'quarters' || name === 'years') {
            var monthsWithDays = months + daysToMonths(days + milliseconds / 86400000);
            switch (name) {
                case 'months':
                    return monthsWithDays;
                case 'quarters':
                    return monthsWithDays / 3;
                case 'years':
                    return monthsWithDays / 12;
            }
        }
        var daysWithMonths = days + monthsToDays(months);
        switch (name) {
            case 'weeks':
                return daysWithMonths / 7 + milliseconds / 6048e5;
            case 'days':
                return daysWithMonths + milliseconds / 864e5;
            case 'hours':
                return daysWithMonths * 24 + milliseconds / 36e5;
            case 'minutes':
                return daysWithMonths * 1440 + milliseconds / 6e4;
            case 'seconds':
                return daysWithMonths * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'milliseconds':
                return Math.floor(daysWithMonths * 864e5) + milliseconds;
            default:
                throw new Error('Unknown unit ' + name);
        }
    };
    DurationImpl.prototype.milliseconds = function () {
        return this.isValid() ? this._values.milliseconds || 0 : NaN;
    };
    DurationImpl.prototype.asMilliseconds = function () {
        return this.as('milliseconds');
    };
    DurationImpl.prototype.seconds = function () {
        return this.isValid() ? this._values.seconds || 0 : NaN;
    };
    DurationImpl.prototype.asSeconds = function () {
        return this.as('seconds');
    };
    DurationImpl.prototype.minutes = function () {
        return this.isValid() ? this._values.minutes || 0 : NaN;
    };
    DurationImpl.prototype.asMinutes = function () {
        return this.as('minutes');
    };
    DurationImpl.prototype.hours = function () {
        return this.isValid() ? this._values.hours || 0 : NaN;
    };
    DurationImpl.prototype.asHours = function () {
        return this.as('hours');
    };
    DurationImpl.prototype.days = function () {
        return this.isValid() ? this._values.days || 0 : NaN;
    };
    DurationImpl.prototype.asDays = function () {
        return this.as('days');
    };
    DurationImpl.prototype.weeks = function () {
        return this.isValid() ? this._values.weeks || 0 : NaN;
    };
    DurationImpl.prototype.asWeeks = function () {
        return this.as('weeks');
    };
    DurationImpl.prototype.months = function () {
        return this.isValid() ? this._values.months || 0 : NaN;
    };
    DurationImpl.prototype.asMonths = function () {
        return this.as('months');
    };
    DurationImpl.prototype.quarters = function () {
        return this.isValid() ? this._values.quarters || 0 : NaN;
    };
    DurationImpl.prototype.asQuarters = function () {
        return this.as('quarters');
    };
    DurationImpl.prototype.years = function () {
        return this.isValid() ? this._values.years || 0 : NaN;
    };
    DurationImpl.prototype.asYears = function () {
        return this.as('years');
    };
    DurationImpl.prototype.add = function (amount, unit) {
        if (!this.isValid()) {
            return this;
        }
        var newValues = this.toObject();
        var addValues = (0, createDuration_1.createDuration)(amount, unit).toObject();
        for (var _i = 0, _b = Object.entries(addValues); _i < _b.length; _i++) {
            var _c = _b[_i], key = _c[0], value = _c[1];
            var k = key;
            newValues[k] = (newValues[k] || 0) + value;
        }
        return new DurationImpl({ values: newValues, locale: this._locale });
    };
    DurationImpl.prototype.subtract = function (amount, unit) {
        var subtractDuration = (0, createDuration_1.createDuration)(amount, unit).negate();
        return this.add(subtractDuration);
    };
    DurationImpl.prototype.negate = function () {
        var values = {};
        for (var _i = 0, _b = Object.entries(this._values); _i < _b.length; _i++) {
            var _c = _b[_i], key = _c[0], value = _c[1];
            values[key] = value ? -value : 0;
        }
        return new DurationImpl({ values: values, locale: this._locale });
    };
    DurationImpl.prototype.normalize = function (options) {
        if (!this.isValid()) {
            return this;
        }
        return new DurationImpl({
            values: (0, normalize_1.normalizeValues)(this._values, options),
            locale: this._locale,
        });
    };
    DurationImpl.prototype.shiftTo = function (units, options) {
        if (!this.isValid()) {
            return this;
        }
        var normalizedUnits = units.map(function (u) { return (0, utils_1.normalizeDurationUnit)(u); });
        return new DurationImpl({
            values: (0, normalize_1.shiftTo)(this._values, normalizedUnits, options),
            locale: this._locale,
        });
    };
    DurationImpl.prototype.rescale = function (options) {
        if (!this.isValid()) {
            return this;
        }
        return new DurationImpl({
            values: (0, normalize_1.rescale)(this._values, options),
            locale: this._locale,
        });
    };
    DurationImpl.prototype.toISOString = function () {
        if (!this.isValid()) {
            return 'Invalid Duration';
        }
        var s = 'P';
        if (this.years() !== 0) {
            s += this.years() + 'Y';
        }
        if (this.months() !== 0 || this.quarters() !== 0) {
            s += this.months() + this.quarters() * 3 + 'M';
        }
        if (this.weeks() !== 0) {
            s += this.weeks() + 'W';
        }
        if (this.days() !== 0) {
            s += this.days() + 'D';
        }
        if (this.hours() !== 0 ||
            this.minutes() !== 0 ||
            this.seconds() !== 0 ||
            this.milliseconds() !== 0) {
            s += 'T';
        }
        if (this.hours() !== 0) {
            s += this.hours() + 'H';
        }
        if (this.minutes() !== 0) {
            s += this.minutes() + 'M';
        }
        if (this.seconds() !== 0 || this.milliseconds() !== 0) {
            s += Math.round(1000 * this.seconds() + this.milliseconds()) / 1000 + 'S';
        }
        if (s === 'P')
            s += 'T0S';
        return s;
    };
    DurationImpl.prototype.toJSON = function () {
        return this.toISOString();
    };
    DurationImpl.prototype.toObject = function () {
        if (!this.isValid()) {
            return {};
        }
        return __assign({}, this._values);
    };
    DurationImpl.prototype.toString = function () {
        return this.toISOString();
    };
    DurationImpl.prototype.valueOf = function () {
        return this.asMilliseconds();
    };
    /**
     * Returns a string representation of this Duration appropriate for the REPL.
     * @return {string}
     */
    DurationImpl.prototype[(_a = IS_DURATION, Symbol.for('nodejs.util.inspect.custom'))] = function () {
        if (this.isValid()) {
            return "Duration { values: ".concat(JSON.stringify(this._values), " }");
        }
        else {
            return "Duration { Invalid Duration }";
        }
    };
    DurationImpl.prototype.humanize = function (withSuffix) {
        if (!this.isValid()) {
            return 'Invalid Duration';
        }
        var now = (0, dateTime_1.dateTimeUtc)({ lang: this._locale });
        return now.add(this.valueOf(), 'ms').from(now, !withSuffix);
    };
    DurationImpl.prototype.humanizeIntl = function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (!this.isValid()) {
            return 'Invalid Duration';
        }
        var l = normalize_1.orderedUnits
            .map(function (unit) {
            var val = _this._values[unit];
            if (val === undefined) {
                return null;
            }
            return (0, locale_1.getNumberFormat)(_this._locale, __assign(__assign({ style: 'unit', unitDisplay: 'long' }, options), { unit: unit.slice(0, -1) })).format(val);
        })
            .filter(Boolean);
        return (0, locale_1.getListFormat)(this._locale, {
            type: 'conjunction',
            style: options.listStyle || 'narrow',
        }).format(l);
    };
    DurationImpl.prototype.format = function (formatInput, options) {
        if (options === void 0) { options = {}; }
        if (!this.isValid()) {
            return 'Invalid Duration';
        }
        var formattingTokens = /(\[[^[]*\])|y+|M+|w+|d+|h+|m+|s+|S+|./g;
        var tokens = [];
        var units = [];
        var match;
        while ((match = formattingTokens.exec(formatInput))) {
            var value = match[0];
            var escaped = match[1];
            var unit = tokenToField(value[0]);
            if (unit) {
                tokens.push({ literal: false, padTo: value.length, unit: unit });
                units.push(unit);
            }
            else if (escaped) {
                tokens.push({ literal: true, value: escaped.slice(1, -1) });
            }
            else {
                tokens.push({ literal: true, value: value });
            }
        }
        var dur = this.shiftTo(units);
        var result = '';
        var _b = options.floor, floor = _b === void 0 ? true : _b, forceSimple = options.forceSimple, other = __rest(options, ["floor", "forceSimple"]);
        var useIntlFormatter = !forceSimple || Object.keys(other).length > 0;
        for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
            var token = tokens_1[_i];
            if (token.literal) {
                result += token.value;
            }
            else {
                var val = dur.get(token.unit);
                if (useIntlFormatter) {
                    var formatter = (0, locale_1.getNumberFormat)(this._locale, __assign(__assign({ useGrouping: false }, other), { minimumIntegerDigits: token.padTo }));
                    var fixed = floor ? Math.floor(val) : val;
                    result += formatter.format(fixed);
                }
                else {
                    var fixed = floor ? Math.floor(val) : Math.round(val * 1000) / 1000;
                    result += "".concat(fixed < 0 ? '-' : '').concat(Math.abs(fixed)
                        .toString()
                        .padStart(token.padTo, '0'));
                }
            }
        }
        return result;
    };
    DurationImpl.prototype.isValid = function () {
        return this._isValid;
    };
    DurationImpl.prototype.locale = function (locale) {
        if (!locale) {
            return this._locale;
        }
        return new DurationImpl({ values: this._values, locale: locale });
    };
    return DurationImpl;
}());
exports.DurationImpl = DurationImpl;
function isDuration(value) {
    return DurationImpl.isDuration(value);
}
exports.isDuration = isDuration;
function daysToMonths(days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return (days * 4800) / 146097;
}
function monthsToDays(months) {
    // the reverse of daysToMonths
    return (months * 146097) / 4800;
}
function tokenToField(token) {
    switch (token[0]) {
        case 'S':
            return 'millisecond';
        case 's':
            return 'second';
        case 'm':
            return 'minute';
        case 'h':
            return 'hour';
        case 'd':
            return 'day';
        case 'w':
            return 'week';
        case 'M':
            return 'month';
        case 'y':
            return 'year';
        default:
            return null;
    }
}
