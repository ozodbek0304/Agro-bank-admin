"use strict";
// Copyright 2015 Grafana Labs
// Copyright 2021 YANDEX LLC
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDateMath = exports.parse = exports.isLikeRelative = void 0;
var dateTime_1 = require("../dateTime");
var units = ['y', 'Q', 'M', 'w', 'd', 'h', 'm', 's'];
function isLikeRelative(text) {
    return text.startsWith('now');
}
exports.isLikeRelative = isLikeRelative;
function parse(text, options) {
    if (options === void 0) { options = {}; }
    if (!text) {
        return undefined;
    }
    var roundUp = options.roundUp, timeZone = options.timeZone;
    var time;
    var mathString = '';
    var index;
    var parseString;
    if (text.substring(0, 3) === 'now') {
        time = (0, dateTime_1.dateTime)({ timeZone: timeZone });
        mathString = text.substring('now'.length);
    }
    else {
        index = text.indexOf('||');
        if (index === -1) {
            parseString = text;
            mathString = '';
        }
        else {
            parseString = text.substring(0, index);
            mathString = text.substring(index + 2);
        }
        time = (0, dateTime_1.dateTime)({ input: parseString, timeZone: timeZone });
    }
    if (!time.isValid()) {
        return undefined;
    }
    if (!mathString.length) {
        return time;
    }
    return parseDateMath(mathString, time, roundUp);
}
exports.parse = parse;
function parseDateMath(mathString, time, roundUp) {
    var strippedMathString = mathString.replace(/\s/g, '');
    var resultTime = time;
    var i = 0;
    var len = strippedMathString.length;
    while (i < len) {
        var c = strippedMathString.charAt(i++);
        var type = void 0;
        var num = void 0;
        if (c === '/') {
            type = 0;
        }
        else if (c === '+') {
            type = 1;
        }
        else if (c === '-') {
            type = 2;
        }
        else {
            return undefined;
        }
        if (isNaN(parseInt(strippedMathString.charAt(i), 10))) {
            num = 1;
        }
        else if (strippedMathString.length === 2) {
            num = parseInt(strippedMathString.charAt(i), 10);
        }
        else {
            var numFrom = i;
            while (!isNaN(parseInt(strippedMathString.charAt(i), 10))) {
                i++;
                if (i > 10) {
                    return undefined;
                }
            }
            num = parseInt(strippedMathString.substring(numFrom, i), 10);
        }
        if (type === 0) {
            // rounding is only allowed on whole, single, units (eg M or 1M, not 0.5M or 2M)
            if (num !== 1) {
                return undefined;
            }
        }
        var unit = strippedMathString.charAt(i++);
        if (units.includes(unit)) {
            if (type === 0) {
                if (roundUp) {
                    resultTime = resultTime.endOf(unit);
                }
                else {
                    resultTime = resultTime.startOf(unit);
                }
            }
            else if (type === 1) {
                resultTime = resultTime.add(num, unit);
            }
            else if (type === 2) {
                resultTime = resultTime.subtract(num, unit);
            }
        }
        else {
            return undefined;
        }
    }
    return resultTime;
}
exports.parseDateMath = parseDateMath;
