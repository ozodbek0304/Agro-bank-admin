"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.monthDiff = exports.weekToGregorian = exports.weeksInWeekYear = exports.gregorianToWeek = exports.isoWeekdayToLocal = exports.uncomputeOrdinal = exports.computeOrdinal = exports.offsetFromString = exports.normalizeDateComponents = exports.normalizeComponent = exports.normalizeDurationUnit = exports.objToTS = exports.tsToObject = exports.daysInMonth = exports.daysInYear = exports.isLeapYear = exports.floorMod = void 0;
// x % n but takes the sign of n instead of x
function floorMod(x, n) {
    return x - n * Math.floor(x / n);
}
exports.floorMod = floorMod;
function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
exports.isLeapYear = isLeapYear;
function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}
exports.daysInYear = daysInYear;
function daysInMonth(year, month) {
    var modMonth = floorMod(month, 12), modYear = year + (month - modMonth) / 12;
    if (modMonth === 1) {
        return isLeapYear(modYear) ? 29 : 28;
    }
    else {
        return [31, -1, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth];
    }
}
exports.daysInMonth = daysInMonth;
function tsToObject(ts, offset) {
    var value = ts + offset * 60 * 1000;
    var date = new Date(value);
    return {
        year: date.getUTCFullYear(),
        month: date.getUTCMonth(),
        date: date.getUTCDate(),
        hour: date.getUTCHours(),
        minute: date.getUTCMinutes(),
        second: date.getUTCSeconds(),
        millisecond: date.getUTCMilliseconds(),
    };
}
exports.tsToObject = tsToObject;
function objToTS(obj) {
    var ts = Date.UTC(obj.year, obj.month, obj.date, obj.hour, obj.minute, obj.second, obj.millisecond);
    // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
    if (obj.year < 100 && obj.year >= 0) {
        var d = new Date(ts);
        // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not
        // so if obj.year is in 99, but obj.day makes it roll over into year 100,
        // the calculations done by Date.UTC are using year 2000 - which is incorrect
        d.setUTCFullYear(obj.year, obj.month, obj.date);
        return d.valueOf();
    }
    return ts;
}
exports.objToTS = objToTS;
var durationNormalizedUnits = {
    y: 'years',
    year: 'years',
    years: 'years',
    Q: 'quarters',
    quarter: 'quarters',
    quarters: 'quarters',
    M: 'months',
    month: 'months',
    months: 'months',
    w: 'weeks',
    week: 'weeks',
    weeks: 'weeks',
    d: 'days',
    day: 'days',
    days: 'days',
    h: 'hours',
    hour: 'hours',
    hours: 'hours',
    m: 'minutes',
    minute: 'minutes',
    minutes: 'minutes',
    s: 'seconds',
    second: 'seconds',
    seconds: 'seconds',
    ms: 'milliseconds',
    millisecond: 'milliseconds',
    milliseconds: 'milliseconds',
};
function normalizeDurationUnit(component) {
    var unit = ['d', 'D', 'm', 'M', 'w', 'W', 'E', 'Q'].includes(component)
        ? component
        : component.toLowerCase();
    if (unit in durationNormalizedUnits) {
        return durationNormalizedUnits[unit];
    }
    throw new Error("Invalid unit ".concat(component));
}
exports.normalizeDurationUnit = normalizeDurationUnit;
var normalizedUnits = {
    y: 'year',
    year: 'year',
    years: 'year',
    M: 'month',
    month: 'month',
    months: 'month',
    D: 'date',
    date: 'date',
    dates: 'date',
    h: 'hour',
    hour: 'hour',
    hours: 'hour',
    m: 'minute',
    minute: 'minute',
    minutes: 'minute',
    Q: 'quarter',
    quarter: 'quarter',
    quarters: 'quarter',
    s: 'second',
    second: 'second',
    seconds: 'second',
    ms: 'millisecond',
    millisecond: 'millisecond',
    milliseconds: 'millisecond',
    d: 'day',
    day: 'day',
    days: 'day',
    weeknumber: 'weekNumber',
    w: 'weekNumber',
    week: 'weekNumber',
    weeks: 'weekNumber',
    isoweeknumber: 'isoWeekNumber',
    W: 'isoWeekNumber',
    isoweek: 'isoWeekNumber',
    isoweeks: 'isoWeekNumber',
    E: 'isoWeekday',
    isoweekday: 'isoWeekday',
    isoweekdays: 'isoWeekday',
    weekday: 'weekday',
    weekdays: 'weekday',
    e: 'weekday',
    dayOfYear: 'dayOfYear',
    dayOfYears: 'dayOfYear',
    DDD: 'dayOfYear',
    weekyear: 'weekYear',
    isoweekyear: 'isoWeekYear',
};
function normalizeComponent(component) {
    var unit = ['d', 'D', 'm', 'M', 'w', 'W', 'e', 'E', 'Q'].includes(component)
        ? component
        : component.toLowerCase();
    if (unit in normalizedUnits) {
        return normalizedUnits[unit];
    }
    throw new Error("Invalid unit ".concat(component));
}
exports.normalizeComponent = normalizeComponent;
function asNumber(value) {
    var numericValue = Number(value);
    if (typeof value === 'boolean' || value === '' || Number.isNaN(numericValue)) {
        throw new Error("Invalid unit value ".concat(value));
    }
    return numericValue;
}
function normalizeDateComponents(components, normalizer) {
    var normalized = {};
    for (var _i = 0, _a = Object.entries(components); _i < _a.length; _i++) {
        var _b = _a[_i], c = _b[0], v = _b[1];
        if (v === undefined || v === null) {
            continue;
        }
        normalized[normalizer(c)] = asNumber(v);
    }
    return normalized;
}
exports.normalizeDateComponents = normalizeDateComponents;
var matchOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([+-]|\d\d)/gi;
function offsetFromString(value) {
    var matches = (value || '').match(matchOffset);
    if (matches === null) {
        return null;
    }
    var chunk = matches[matches.length - 1] || '';
    var _a = String(chunk).match(chunkOffset) || ['-', 0, 0], sign = _a[0], h = _a[1], m = _a[2];
    var minutes = Number(Number(h) * 60) + (isFinite(Number(m)) ? Number(m) : 0);
    return sign === '+' ? minutes : -minutes;
}
exports.offsetFromString = offsetFromString;
function dayOfWeek(year, month, day) {
    var d = new Date(Date.UTC(year, month, day));
    if (year < 100 && year >= 0) {
        d.setUTCFullYear(d.getUTCFullYear() - 1900);
    }
    return d.getUTCDay();
}
function isoDayOfWeek(year, month, day) {
    var d = dayOfWeek(year, month, day);
    return d === 0 ? 7 : d;
}
var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
var leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
function computeOrdinal(_a) {
    var year = _a.year, month = _a.month, date = _a.date;
    return date + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month];
}
exports.computeOrdinal = computeOrdinal;
function uncomputeOrdinal(_a) {
    var year = _a.year, ordinal = _a.ordinal;
    var table = isLeapYear(year) ? leapLadder : nonLeapLadder, month = table.findIndex(function (i) { return i < ordinal; }), day = ordinal - table[month];
    return { month: month, date: day };
}
exports.uncomputeOrdinal = uncomputeOrdinal;
function isoWeekdayToLocal(isoWeekday, startOfWeek) {
    return ((isoWeekday - startOfWeek + 7) % 7) + 1;
}
exports.isoWeekdayToLocal = isoWeekdayToLocal;
function gregorianToWeek(dateObj, minDaysInFirstWeek, startOfWeek) {
    var year = dateObj.year, month = dateObj.month, date = dateObj.date;
    var day = dayOfWeek(year, month, date);
    var _a = gregorianToWeekLocale(dateObj, minDaysInFirstWeek, startOfWeek), weekYear = _a.weekYear, weekNumber = _a.weekNumber, weekday = _a.weekday;
    var _b = gregorianToWeekLocale(dateObj, 4, 1), isoWeekYear = _b.weekYear, isoWeekNumber = _b.weekNumber, isoWeekday = _b.weekday;
    return {
        day: day,
        weekYear: weekYear,
        weekNumber: weekNumber,
        weekday: weekday - 1,
        isoWeekYear: isoWeekYear,
        isoWeekNumber: isoWeekNumber,
        isoWeekday: isoWeekday,
    };
}
exports.gregorianToWeek = gregorianToWeek;
function gregorianToWeekLocale(dateObj, minDaysInFirstWeek, startOfWeek) {
    var year = dateObj.year, month = dateObj.month, date = dateObj.date;
    var isoWeekday = isoDayOfWeek(year, month, date);
    var weekday = isoWeekdayToLocal(isoWeekday, startOfWeek);
    var ordinal = computeOrdinal({ year: year, month: month, date: date });
    var weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7);
    var weekYear;
    if (weekNumber < 1) {
        weekYear = year - 1;
        weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
    }
    else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
        weekYear = year + 1;
        weekNumber = 1;
    }
    else {
        weekYear = year;
    }
    return { weekYear: weekYear, weekNumber: weekNumber, weekday: weekday };
}
function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
    var fwdlw = isoWeekdayToLocal(isoDayOfWeek(year, 0, minDaysInFirstWeek), startOfWeek);
    return -fwdlw + minDaysInFirstWeek - 1;
}
function weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek) {
    if (minDaysInFirstWeek === void 0) { minDaysInFirstWeek = 4; }
    if (startOfWeek === void 0) { startOfWeek = 1; }
    var weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
    var weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
    return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
}
exports.weeksInWeekYear = weeksInWeekYear;
function weekToGregorian(weekData, minDaysInFirstWeek, startOfWeek) {
    var weekYear = weekData.weekYear, weekNumber = weekData.weekNumber, weekday = weekData.weekday;
    var weekdayOfJan4 = isoWeekdayToLocal(isoDayOfWeek(weekYear, 0, minDaysInFirstWeek), startOfWeek);
    var yearInDays = daysInYear(weekYear);
    var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek;
    var year;
    if (ordinal < 1) {
        year = weekYear - 1;
        ordinal += daysInYear(year);
    }
    else if (ordinal > yearInDays) {
        year = weekYear + 1;
        ordinal -= daysInYear(weekYear);
    }
    else {
        year = weekYear;
    }
    var _a = uncomputeOrdinal({ year: year, ordinal: ordinal }), month = _a.month, date = _a.date;
    return { year: year, month: month, date: date };
}
exports.weekToGregorian = weekToGregorian;
function monthDiff(a, b) {
    if (a.date() < b.date()) {
        // end-of-month calculations work correct when the start month has more
        // days than the end month.
        return -monthDiff(b, a);
    }
    // difference in months
    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month());
    // b is in (anchor - 1 month, anchor + 1 month)
    var anchor = a.add(wholeMonthDiff, 'months');
    var adjust;
    if (b.valueOf() - anchor.valueOf() < 0) {
        var anchor2 = a.add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b.valueOf() - anchor.valueOf()) / (anchor.valueOf() - anchor2.valueOf());
    }
    else {
        var anchor2 = a.add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b.valueOf() - anchor.valueOf()) / (anchor2.valueOf() - anchor.valueOf());
    }
    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}
exports.monthDiff = monthDiff;
