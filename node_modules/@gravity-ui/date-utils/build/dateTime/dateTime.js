"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dateTimeUtc = exports.dateTime = exports.isDateTime = void 0;
var constants_1 = require("../constants");
var dayjs_1 = __importDefault(require("../dayjs"));
var duration_1 = require("../duration");
var settings_1 = require("../settings");
var timeZone_1 = require("../timeZone");
var utils_1 = require("../utils");
var format_1 = require("./format");
var parse_1 = require("./parse");
var relative_1 = require("./relative");
var IS_DATE_TIME = Symbol('isDateTime');
var DateTimeImpl = /** @class */ (function () {
    function DateTimeImpl(opt) {
        this._weekInfo = null;
        this[IS_DATE_TIME] = true;
        this._timestamp = opt.ts;
        this._locale = opt.locale;
        this._timeZone = opt.timeZone;
        this._offset = opt.offset;
        this._c = (0, utils_1.tsToObject)(opt.ts, opt.offset);
        this._localeData = opt.localeData;
        this._isValid = opt.isValid;
    }
    DateTimeImpl.isDateTime = function (o) {
        return ((typeof o === 'object' && o && IS_DATE_TIME in o && o[IS_DATE_TIME] === true) || false);
    };
    DateTimeImpl.prototype.format = function (formatInput) {
        if (!this.isValid()) {
            return this._localeData.invalidDate || constants_1.INVALID_DATE_STRING;
        }
        if (formatInput === undefined && this._offset === 0) {
            return this.format('YYYY-MM-DDTHH:mm:ss[Z]');
        }
        return (0, format_1.formatDate)(this, formatInput, this._localeData);
    };
    DateTimeImpl.prototype.toISOString = function (keepOffset) {
        // invalid date throws an error
        if (keepOffset) {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                .toISOString()
                .replace('Z', this.format('Z'));
        }
        return this.toDate().toISOString();
    };
    DateTimeImpl.prototype.utcOffset = function (offset, keepLocalTime) {
        var isSetOffset = offset !== undefined && offset !== null;
        if (!this.isValid()) {
            return isSetOffset ? this : NaN;
        }
        if (isSetOffset) {
            var newOffset = void 0;
            if (typeof offset === 'string') {
                newOffset = (0, utils_1.offsetFromString)(offset);
                if (newOffset === null) {
                    return this;
                }
            }
            else if (Math.abs(offset) < 16) {
                newOffset = offset * 60;
            }
            else {
                newOffset = offset;
            }
            var ts = this.valueOf();
            if (keepLocalTime) {
                ts -= (newOffset - this._offset) * 60 * 1000;
            }
            return createDateTime({
                ts: ts,
                timeZone: constants_1.UtcTimeZone,
                offset: newOffset,
                locale: this._locale,
            });
        }
        return this._offset;
    };
    DateTimeImpl.prototype.timeZone = function (timeZone, keepLocalTime) {
        var _a;
        if (timeZone === undefined) {
            return this._timeZone === 'system' ? (0, timeZone_1.guessUserTimeZone)() : this._timeZone;
        }
        if (!this.isValid()) {
            return this;
        }
        var zone = (0, timeZone_1.normalizeTimeZone)(timeZone, settings_1.settings.getDefaultTimeZone());
        var ts = this.valueOf();
        var offset = (0, timeZone_1.timeZoneOffset)(zone, ts);
        if (keepLocalTime) {
            ts += this._offset * 60 * 1000;
            _a = (0, timeZone_1.fixOffset)(ts, offset, zone), ts = _a[0], offset = _a[1];
        }
        return createDateTime({ ts: ts, timeZone: zone, offset: offset, locale: this._locale });
    };
    DateTimeImpl.prototype.add = function (amount, unit) {
        return this.addSubtract(amount, unit, 1);
    };
    DateTimeImpl.prototype.subtract = function (amount, unit) {
        return this.addSubtract(amount, unit, -1);
    };
    DateTimeImpl.prototype.startOf = function (unitOfTime) {
        if (!this.isValid()) {
            return this;
        }
        var dateComponents = {};
        var unit = (0, utils_1.normalizeComponent)(unitOfTime);
        /* eslint-disable no-fallthrough */
        switch (unit) {
            case 'year':
            case 'quarter':
                if (unit === 'quarter') {
                    dateComponents.month = this.month() - (this.month() % 3);
                }
                else {
                    dateComponents.month = 0;
                }
            case 'month':
            case 'weekNumber':
            case 'isoWeekNumber':
                if (unit === 'weekNumber') {
                    dateComponents.date = this.date() - this.weekday();
                }
                else if (unit === 'isoWeekNumber') {
                    dateComponents.date = this.date() - (this.isoWeekday() - 1);
                }
                else {
                    dateComponents.date = 1;
                }
            case 'day':
            case 'date':
            case 'weekday':
            case 'isoWeekday':
            case 'dayOfYear':
                dateComponents.hour = 0;
            case 'hour':
                dateComponents.minute = 0;
            case 'minute':
                dateComponents.second = 0;
            case 'second': {
                dateComponents.millisecond = 0;
            }
        }
        /* eslint-enable no-fallthrough */
        return this.set(dateComponents);
    };
    DateTimeImpl.prototype.endOf = function (unitOfTime) {
        var _a;
        if (!this.isValid()) {
            return this;
        }
        var dateComponents = {};
        var unit = (0, utils_1.normalizeComponent)(unitOfTime);
        /* eslint-disable no-fallthrough */
        switch (unit) {
            case 'year':
            case 'quarter':
                if (unit === 'quarter') {
                    dateComponents.month = this.month() - (this.month() % 3) + 2;
                }
                else {
                    dateComponents.month = 11;
                }
            case 'month':
            case 'weekNumber':
            case 'isoWeekNumber':
                if (unit === 'weekNumber') {
                    dateComponents.date = this.date() - this.weekday() + 6;
                }
                else if (unit === 'isoWeekNumber') {
                    dateComponents.date = this.date() - (this.isoWeekday() - 1) + 6;
                }
                else {
                    dateComponents.date = (0, utils_1.daysInMonth)(this.year(), (_a = dateComponents.month) !== null && _a !== void 0 ? _a : this.month());
                }
            case 'day':
            case 'date':
            case 'weekday':
            case 'isoWeekday':
            case 'dayOfYear':
                dateComponents.hour = 23;
            case 'hour':
                dateComponents.minute = 59;
            case 'minute':
                dateComponents.second = 59;
            case 'second': {
                dateComponents.millisecond = 999;
            }
        }
        /* eslint-enable no-fallthrough */
        return this.set(dateComponents);
    };
    DateTimeImpl.prototype.local = function (keepLocalTime) {
        return this.timeZone('system', keepLocalTime);
    };
    DateTimeImpl.prototype.valueOf = function () {
        return this.isValid() ? this._timestamp : NaN;
    };
    DateTimeImpl.prototype.isSame = function (input, granularity) {
        var ts = getTimestamp(input, 'system')[0];
        if (!this.isValid() || isNaN(ts)) {
            return false;
        }
        return !this.isBefore(ts, granularity) && !this.isAfter(ts, granularity);
    };
    DateTimeImpl.prototype.isBefore = function (input, granularity) {
        var ts = getTimestamp(input, 'system')[0];
        if (!this.isValid() || isNaN(ts)) {
            return false;
        }
        var unit = (0, utils_1.normalizeDurationUnit)(granularity !== null && granularity !== void 0 ? granularity : 'millisecond');
        var localTs = unit === 'milliseconds' ? this.valueOf() : this.endOf(unit).valueOf();
        return localTs < ts;
    };
    DateTimeImpl.prototype.isAfter = function (input, granularity) {
        var ts = getTimestamp(input, 'system')[0];
        if (!this.isValid() || isNaN(ts)) {
            return false;
        }
        var unit = (0, utils_1.normalizeDurationUnit)(granularity !== null && granularity !== void 0 ? granularity : 'millisecond');
        var localTs = unit === 'milliseconds' ? this.valueOf() : this.startOf(unit).valueOf();
        return localTs > ts;
    };
    DateTimeImpl.prototype.isValid = function () {
        return this._isValid;
    };
    DateTimeImpl.prototype.diff = function (amount, unit, asFloat) {
        if (!this.isValid()) {
            return NaN;
        }
        var value = DateTimeImpl.isDateTime(amount)
            ? amount.timeZone(this._timeZone)
            : createDateTime({
                ts: getTimestamp(amount, 'system')[0],
                timeZone: this._timeZone,
                locale: this._locale,
                offset: this._offset,
            });
        if (!value.isValid()) {
            return NaN;
        }
        var unitType = (0, utils_1.normalizeDurationUnit)(unit || 'millisecond');
        var zoneDelta = (value.utcOffset() - this.utcOffset()) * 60000;
        var output = 0;
        switch (unitType) {
            case 'years': {
                output = (0, utils_1.monthDiff)(this, value) / 12;
                break;
            }
            case 'quarters': {
                output = (0, utils_1.monthDiff)(this, value) / 3;
                break;
            }
            case 'months': {
                output = (0, utils_1.monthDiff)(this, value);
                break;
            }
            case 'weeks': {
                output = (this.valueOf() - value.valueOf() - zoneDelta) / 604800000;
                break;
            }
            case 'days': {
                output = (this.valueOf() - value.valueOf() - zoneDelta) / 86400000;
                break;
            }
            case 'hours': {
                output = (this.valueOf() - value.valueOf()) / 3600000;
                break;
            }
            case 'minutes': {
                output = (this.valueOf() - value.valueOf()) / 60000;
                break;
            }
            case 'seconds': {
                output = (this.valueOf() - value.valueOf()) / 1000;
                break;
            }
            default: {
                output = this.valueOf() - value.valueOf();
            }
        }
        return asFloat ? output : Math.floor(Math.abs(output)) * Math.sign(output) || 0;
    };
    DateTimeImpl.prototype.fromNow = function (withoutSuffix) {
        return this.from(dateTime({ timeZone: this._timeZone, lang: this._locale }), withoutSuffix);
    };
    DateTimeImpl.prototype.from = function (formaInput, withoutSuffix) {
        if (!this.isValid()) {
            return this._localeData.invalidDate || constants_1.INVALID_DATE_STRING;
        }
        return (0, relative_1.fromTo)(this, formaInput, this._localeData.relativeTime, withoutSuffix, true);
    };
    DateTimeImpl.prototype.locale = function (locale) {
        if (!locale) {
            return this._locale;
        }
        if (!this.isValid()) {
            return this;
        }
        return createDateTime({
            ts: this.valueOf(),
            timeZone: this._timeZone,
            offset: this._offset,
            locale: dayjs_1.default.locale(locale, undefined, true),
        });
    };
    DateTimeImpl.prototype.toDate = function () {
        return new Date(this.valueOf());
    };
    DateTimeImpl.prototype.unix = function () {
        return this.isValid() ? Math.floor(this.valueOf() / 1000) : NaN;
    };
    DateTimeImpl.prototype.utc = function (keepLocalTime) {
        return this.timeZone(constants_1.UtcTimeZone, keepLocalTime);
    };
    DateTimeImpl.prototype.daysInMonth = function () {
        return this.isValid() ? (0, utils_1.daysInMonth)(this._c.year, this._c.month) : NaN;
    };
    // eslint-disable-next-line complexity
    DateTimeImpl.prototype.set = function (unit, amount) {
        var _a, _b;
        if (!this.isValid()) {
            return this;
        }
        var dateComponents = this._c;
        var newComponents = (0, utils_1.normalizeDateComponents)(typeof unit === 'object' ? unit : (_a = {}, _a[unit] = amount, _a), utils_1.normalizeComponent);
        var settingWeekStuff = newComponents.day !== undefined ||
            newComponents.weekNumber !== undefined ||
            newComponents.weekYear !== undefined ||
            newComponents.isoWeekNumber !== undefined ||
            newComponents.weekday !== undefined ||
            newComponents.isoWeekday !== undefined ||
            newComponents.isoWeekYear !== undefined;
        var containsDayOfYear = newComponents.dayOfYear !== undefined;
        var containsYear = newComponents.year !== undefined;
        var containsMonthOrDate = newComponents.month !== undefined || newComponents.date !== undefined;
        var containsYearOrMonthDay = containsYear || containsMonthOrDate;
        if (settingWeekStuff && (containsYearOrMonthDay || containsDayOfYear)) {
            throw new Error("Can't mix weekYear/weekNumber units with year/month/day");
        }
        if (containsDayOfYear && containsMonthOrDate) {
            throw new Error("Can't mix day of year with month/day");
        }
        var mixed;
        if (settingWeekStuff) {
            var weekday = newComponents.weekday, weekNumber = newComponents.weekNumber, weekYear = newComponents.weekYear, isoWeekday = newComponents.isoWeekday, isoWeekNumber = newComponents.isoWeekNumber, isoWeekYear = newComponents.isoWeekYear, day = newComponents.day;
            var hasLocalWeekData = weekday !== undefined || weekNumber !== undefined || weekYear !== undefined;
            var hasIsoWeekData = isoWeekday !== undefined ||
                isoWeekNumber !== undefined ||
                isoWeekYear !== undefined ||
                day !== undefined;
            if (hasLocalWeekData && hasIsoWeekData) {
                throw new Error("Can't mix local week with ISO week");
            }
            var weekInfo = this.weekInfo();
            if (hasLocalWeekData) {
                var _d = getLocaleWeekValues(this._localeData), minDaysInFirstWeek = _d.minDaysInFirstWeek, startOfWeek = _d.startOfWeek;
                var weekData = {
                    weekday: (weekday !== null && weekday !== void 0 ? weekday : weekInfo.weekday) + 1,
                    weekNumber: weekNumber !== null && weekNumber !== void 0 ? weekNumber : weekInfo.weekNumber,
                    weekYear: weekYear !== null && weekYear !== void 0 ? weekYear : weekInfo.weekYear,
                };
                mixed = __assign(__assign(__assign({}, dateComponents), newComponents), (0, utils_1.weekToGregorian)(weekData, minDaysInFirstWeek, startOfWeek));
            }
            else {
                var weekData = {
                    weekday: isoWeekday !== null && isoWeekday !== void 0 ? isoWeekday : (day === undefined ? weekInfo.isoWeekday : day || 7),
                    weekNumber: isoWeekNumber !== null && isoWeekNumber !== void 0 ? isoWeekNumber : weekInfo.isoWeekNumber,
                    weekYear: isoWeekYear !== null && isoWeekYear !== void 0 ? isoWeekYear : weekInfo.isoWeekYear,
                };
                mixed = __assign(__assign(__assign({}, dateComponents), newComponents), (0, utils_1.weekToGregorian)(weekData, 4, 1));
            }
        }
        else if (containsDayOfYear) {
            mixed = __assign(__assign(__assign({}, dateComponents), newComponents), (0, utils_1.uncomputeOrdinal)(__assign(__assign({ ordinal: this.dayOfYear() }, dateComponents), newComponents)));
        }
        else {
            mixed = __assign(__assign({}, dateComponents), newComponents);
            if (newComponents.date === undefined) {
                mixed.date = Math.min((0, utils_1.daysInMonth)(mixed.year, mixed.month), mixed.date);
            }
        }
        var ts = (0, utils_1.objToTS)(mixed);
        var offset = this._offset;
        if (this._timeZone === constants_1.UtcTimeZone) {
            ts -= offset * 60 * 1000;
        }
        else {
            _b = (0, timeZone_1.fixOffset)(ts, offset, this._timeZone), ts = _b[0], offset = _b[1];
        }
        return createDateTime({
            ts: ts,
            timeZone: this._timeZone,
            offset: offset,
            locale: this._locale,
        });
    };
    DateTimeImpl.prototype.date = function (value) {
        if (typeof value === 'number') {
            return this.set('date', value);
        }
        return this.isValid() ? this._c.date : NaN;
    };
    DateTimeImpl.prototype.month = function (value) {
        if (typeof value === 'number') {
            return this.set('month', value);
        }
        return this.isValid() ? this._c.month : NaN;
    };
    DateTimeImpl.prototype.quarter = function (value) {
        if (typeof value === 'number') {
            return this.set('quarter', value);
        }
        return this.isValid() ? Math.ceil((this._c.month + 1) / 3) : NaN;
    };
    DateTimeImpl.prototype.year = function (value) {
        if (typeof value === 'number') {
            return this.set('year', value);
        }
        return this.isValid() ? this._c.year : NaN;
    };
    DateTimeImpl.prototype.day = function (value) {
        if (typeof value === 'number') {
            return this.set('day', value);
        }
        return this.isValid() ? this.weekInfo().day : NaN;
    };
    DateTimeImpl.prototype.isoWeekday = function (value) {
        if (typeof value === 'number') {
            // return this.day(this.day() % 7 ? day : day - 7);
            return this.set('isoWeekday', value);
        }
        return this.isValid() ? this.weekInfo().isoWeekday : NaN;
    };
    DateTimeImpl.prototype.hour = function (value) {
        if (typeof value === 'number') {
            return this.set('hour', value);
        }
        return this.isValid() ? this._c.hour : NaN;
    };
    DateTimeImpl.prototype.minute = function (value) {
        if (typeof value === 'number') {
            return this.set('minute', value);
        }
        return this.isValid() ? this._c.minute : NaN;
    };
    DateTimeImpl.prototype.second = function (value) {
        if (typeof value === 'number') {
            return this.set('second', value);
        }
        return this.isValid() ? this._c.second : NaN;
    };
    DateTimeImpl.prototype.millisecond = function (value) {
        if (typeof value === 'number') {
            return this.set('millisecond', value);
        }
        return this.isValid() ? this._c.millisecond : NaN;
    };
    DateTimeImpl.prototype.week = function (value) {
        if (typeof value === 'number') {
            return this.set('week', value);
        }
        return this.isValid() ? this.weekInfo().weekNumber : NaN;
    };
    DateTimeImpl.prototype.weekYear = function (value) {
        if (typeof value === 'number') {
            return this.set('weekYear', value);
        }
        return this.isValid() ? this.weekInfo().weekYear : NaN;
    };
    DateTimeImpl.prototype.weeksInYear = function () {
        var _a = getLocaleWeekValues(this._localeData), minDaysInFirstWeek = _a.minDaysInFirstWeek, startOfWeek = _a.startOfWeek;
        return this.isValid() ? (0, utils_1.weeksInWeekYear)(this.year(), minDaysInFirstWeek, startOfWeek) : NaN;
    };
    DateTimeImpl.prototype.isoWeek = function (value) {
        if (typeof value === 'number') {
            return this.set('isoWeek', value);
        }
        return this.isValid() ? this.weekInfo().isoWeekNumber : NaN;
    };
    DateTimeImpl.prototype.isoWeekYear = function (value) {
        if (typeof value === 'number') {
            return this.set('isoWeekYear', value);
        }
        return this.isValid() ? this.weekInfo().isoWeekYear : NaN;
    };
    DateTimeImpl.prototype.isoWeeksInYear = function () {
        return this.isValid() ? (0, utils_1.weeksInWeekYear)(this.year(), 4, 1) : NaN;
    };
    DateTimeImpl.prototype.weekday = function (value) {
        if (typeof value === 'number') {
            return this.set('weekday', value);
        }
        return this.isValid() ? this.weekInfo().weekday : NaN;
    };
    DateTimeImpl.prototype.dayOfYear = function (value) {
        if (typeof value === 'number') {
            return this.set('dayOfYear', value);
        }
        return this.isValid() ? (0, utils_1.computeOrdinal)(this._c) : NaN;
    };
    DateTimeImpl.prototype.toString = function () {
        return this.isValid()
            ? this.toDate().toUTCString()
            : this._localeData.invalidDate || constants_1.INVALID_DATE_STRING;
    };
    DateTimeImpl.prototype.toJSON = function () {
        return this.isValid() ? this.toISOString() : null;
    };
    /**
     * Returns a string representation of this DateTime appropriate for the REPL.
     * @return {string}
     */
    DateTimeImpl.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        if (this.isValid()) {
            return "DateTime { ts: ".concat(this.toISOString(), ", zone: ").concat(this.timeZone(), ", offset: ").concat(this.utcOffset(), ", locale: ").concat(this.locale(), " }");
        }
        else {
            return "DateTime { ".concat(constants_1.INVALID_DATE_STRING, " }");
        }
    };
    DateTimeImpl.prototype.addSubtract = function (amount, unit, sign) {
        var _a;
        if (!this.isValid()) {
            return this;
        }
        var timeZone = this._timeZone;
        var ts = this.valueOf();
        var offset = this._offset;
        var dur = (0, duration_1.duration)(amount, unit);
        var dateComponents = (0, utils_1.tsToObject)(ts, offset);
        var monthsInput = absRound(dur.months() + dur.quarters() * 3 + dur.years() * 12);
        var daysInput = absRound(dur.days() + dur.weeks() * 7);
        var milliseconds = dur.milliseconds() +
            dur.seconds() * 1000 +
            dur.minutes() * 60 * 1000 +
            dur.hours() * 60 * 60 * 1000;
        if (monthsInput || daysInput) {
            var month = dateComponents.month + sign * monthsInput;
            var date = Math.min(dateComponents.date, (0, utils_1.daysInMonth)(dateComponents.year, month)) +
                sign * daysInput;
            ts = (0, utils_1.objToTS)(__assign(__assign({}, dateComponents), { month: month, date: date }));
            if (timeZone === constants_1.UtcTimeZone) {
                ts -= offset * 60 * 1000;
            }
            else {
                _a = (0, timeZone_1.fixOffset)(ts, offset, timeZone), ts = _a[0], offset = _a[1];
            }
        }
        if (milliseconds) {
            ts += sign * milliseconds;
            if (timeZone !== constants_1.UtcTimeZone) {
                offset = (0, timeZone_1.timeZoneOffset)(timeZone, ts);
            }
        }
        return createDateTime({
            ts: ts,
            timeZone: timeZone,
            offset: offset,
            locale: this._locale,
        });
    };
    DateTimeImpl.prototype.weekInfo = function () {
        if (!this._weekInfo) {
            var _a = getLocaleWeekValues(this._localeData), startOfWeek = _a.startOfWeek, minDaysInFirstWeek = _a.minDaysInFirstWeek;
            this._weekInfo = (0, utils_1.gregorianToWeek)(this._c, minDaysInFirstWeek, startOfWeek);
        }
        return this._weekInfo;
    };
    return DateTimeImpl;
}());
function getLocaleWeekValues(localeData) {
    var weekStart = localeData.weekStart, yearStart = localeData.yearStart;
    return { startOfWeek: weekStart || 7, minDaysInFirstWeek: yearStart || 1 };
}
function absRound(v) {
    var sign = Math.sign(v);
    return Math.round(sign * v) * sign;
}
function createDateTime(_a) {
    var ts = _a.ts, timeZone = _a.timeZone, offset = _a.offset, locale = _a.locale;
    var loc = locale || 'en';
    var localeData = dayjs_1.default.Ls[loc];
    var isValid = !isNaN(Number(new Date(ts)));
    return new DateTimeImpl({ ts: ts, timeZone: timeZone, offset: offset, locale: loc, localeData: localeData, isValid: isValid });
}
function getTimestamp(input, timezone, format, lang, utc) {
    var _a, _b;
    if (utc === void 0) { utc = false; }
    var ts;
    var offset;
    if (isDateTime(input) || typeof input === 'number' || input instanceof Date) {
        ts = Number(input);
    }
    else if (input === null || input === undefined) {
        ts = Date.now();
    }
    else if (Array.isArray(input)) {
        _a = (0, parse_1.getTimestampFromArray)(input, timezone), ts = _a[0], offset = _a[1];
    }
    else if (typeof input === 'object') {
        _b = (0, parse_1.getTimestampFromObject)(input, timezone), ts = _b[0], offset = _b[1];
    }
    else if (utc) {
        ts = dayjs_1.default.utc(input, format, constants_1.STRICT).valueOf();
    }
    else {
        var locale = dayjs_1.default.locale(lang || settings_1.settings.getLocale(), undefined, true);
        var localDate = format
            ? (0, dayjs_1.default)(input, format, locale, constants_1.STRICT)
            : (0, dayjs_1.default)(input, undefined, locale);
        ts = localDate.valueOf();
    }
    offset = offset !== null && offset !== void 0 ? offset : (0, timeZone_1.timeZoneOffset)(timezone, ts);
    return [ts, offset];
}
/**
 * Checks if value is DateTime.
 * @param {unknown} value - value to check.
 */
function isDateTime(value) {
    return DateTimeImpl.isDateTime(value);
}
exports.isDateTime = isDateTime;
/**
 * Creates a DateTime instance.
 * @param opt
 * @param {DateTimeInput=} opt.input - input to parse.
 * @param {string=} opt.format - strict {@link https://dayjs.gitee.io/docs/en/display/format format} for parsing user's input.
 * @param {string=} opt.timeZone - specified {@link https://dayjs.gitee.io/docs/en/timezone/timezone time zone}.
 * @param {string=} opt.lang - specified locale.
 */
function dateTime(opt) {
    var _a = opt || {}, input = _a.input, format = _a.format, timeZone = _a.timeZone, lang = _a.lang;
    var timeZoneOrDefault = (0, timeZone_1.normalizeTimeZone)(timeZone, settings_1.settings.getDefaultTimeZone());
    var locale = dayjs_1.default.locale(lang || settings_1.settings.getLocale(), undefined, true);
    var _b = getTimestamp(input, timeZoneOrDefault, format, lang), ts = _b[0], offset = _b[1];
    var date = createDateTime({
        ts: ts,
        timeZone: timeZoneOrDefault,
        offset: offset,
        locale: locale,
    });
    return date;
}
exports.dateTime = dateTime;
function dateTimeUtc(opt) {
    var _a = opt || {}, input = _a.input, format = _a.format, lang = _a.lang;
    var locale = dayjs_1.default.locale(lang || settings_1.settings.getLocale(), undefined, true);
    var ts = getTimestamp(input, constants_1.UtcTimeZone, format, lang, true)[0];
    var date = createDateTime({
        ts: ts,
        timeZone: constants_1.UtcTimeZone,
        offset: 0,
        locale: locale,
    });
    return date;
}
exports.dateTimeUtc = dateTimeUtc;
