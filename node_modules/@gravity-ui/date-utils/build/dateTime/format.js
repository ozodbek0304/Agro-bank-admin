"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatDate = exports.FORMAT_DEFAULT = exports.expandFormat = void 0;
var constants_1 = require("../constants");
var settings_1 = require("../settings");
var timeZone_1 = require("../timeZone");
function getShortLocalizedFormatFromLongLocalizedFormat(formatBis) {
    return formatBis.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (_, escapeSequence, localizedFormat) {
        return escapeSequence || localizedFormat.slice(1);
    });
}
function expandFormat(format, formats) {
    var _a;
    if (formats === void 0) { formats = (_a = settings_1.settings.getLocaleData().formats) !== null && _a !== void 0 ? _a : constants_1.englishFormats; }
    return format.replace(/(\[[^\]]*])|(LTS?|l{1,4}|L{1,4})/g, function (_, escapeSequence, localizedFormat) {
        if (localizedFormat) {
            if (localizedFormat in constants_1.englishFormats) {
                return (formats[localizedFormat] ||
                    constants_1.englishFormats[localizedFormat]);
            }
            var LongLocalizedFormat = localizedFormat.toUpperCase();
            return getShortLocalizedFormatFromLongLocalizedFormat(formats[LongLocalizedFormat] || constants_1.englishFormats[LongLocalizedFormat]);
        }
        return escapeSequence;
    });
}
exports.expandFormat = expandFormat;
exports.FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ';
var formattingTokens = /(\[[^[]*\])|([Hh]mm(ss)?|Mo|M{1,4}|Do|DDDo|D{1,4}|d{2,4}|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|Y{4,6}|YY?|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
var formatTokenFunctions = {};
function formatDate(date, format, locale) {
    if (format === void 0) { format = exports.FORMAT_DEFAULT; }
    if (locale === void 0) { locale = settings_1.settings.getLocaleData(); }
    var expandedFormat = expandFormat(format, locale.formats);
    return expandedFormat.replace(formattingTokens, function (match) {
        if (formatTokenFunctions[match]) {
            return formatTokenFunctions[match](date, locale, expandedFormat);
        }
        return removeFormattingTokens(match);
    });
}
exports.formatDate = formatDate;
function removeFormattingTokens(input) {
    return input.replace(/^\[([\s\S)]*)\]$/g, '$1');
}
formatTokenFunctions['Y'] = function (date) {
    var y = date.year();
    return y <= 9999 ? zeroPad(y, 4) : '+' + y;
};
formatTokenFunctions['YY'] = function (date) {
    var y = date.year();
    return zeroPad(y % 100, 2);
};
formatTokenFunctions['YYYY'] = function (date) {
    return zeroPad(date.year(), 4);
};
formatTokenFunctions['YYYYY'] = function (date) {
    return zeroPad(date.year(), 5);
};
formatTokenFunctions['YYYYYY'] = function (date) {
    return zeroPad(date.year(), 6, true);
};
formatTokenFunctions['M'] = function (date) {
    return "".concat(date.month() + 1);
};
formatTokenFunctions['MM'] = function (date) {
    return zeroPad(date.month() + 1, 2);
};
formatTokenFunctions['Mo'] = function (date, locale) {
    var _a;
    // dayjs locales ordinal method returns value inside brackets '[' ']'
    return removeFormattingTokens("".concat((_a = locale.ordinal) === null || _a === void 0 ? void 0 : _a.call(locale, date.month() + 1, 'M')));
};
formatTokenFunctions['MMM'] = function (date, locale, format) {
    var month = date.month();
    return getShort({
        date: date,
        format: format,
        data: locale.monthsShort,
        index: month,
        fullData: locale.months,
        maxLength: 3,
    });
};
formatTokenFunctions['MMMM'] = function (date, locale, format) {
    var month = date.month();
    return getShort({
        date: date,
        format: format,
        data: locale.months,
        index: month,
    });
};
formatTokenFunctions['w'] = function (date) {
    return "".concat(date.week());
};
formatTokenFunctions['ww'] = function (date) {
    return zeroPad(date.week(), 2);
};
formatTokenFunctions['wo'] = function (date, locale) {
    var _a;
    // dayjs locales ordinal method returns value inside brackets '[' ']'
    return removeFormattingTokens("".concat((_a = locale.ordinal) === null || _a === void 0 ? void 0 : _a.call(locale, date.week(), 'w')));
};
formatTokenFunctions['W'] = function (date) {
    return "".concat(date.isoWeek());
};
formatTokenFunctions['WW'] = function (date) {
    return zeroPad(date.isoWeek(), 2);
};
formatTokenFunctions['Wo'] = function (date, locale) {
    var _a;
    // dayjs locales ordinal method returns value inside brackets '[' ']'
    return removeFormattingTokens("".concat((_a = locale.ordinal) === null || _a === void 0 ? void 0 : _a.call(locale, date.isoWeek(), 'W')));
};
formatTokenFunctions['d'] = function (date) {
    return "".concat(date.day());
};
formatTokenFunctions['do'] = function (date, locale) {
    var _a;
    // dayjs locales ordinal method returns value inside brackets '[' ']'
    return removeFormattingTokens("".concat((_a = locale.ordinal) === null || _a === void 0 ? void 0 : _a.call(locale, date.day(), 'd')));
};
formatTokenFunctions['dd'] = function (date, locale, format) {
    var day = date.day();
    return getShort({
        date: date,
        format: format,
        data: locale.weekdaysMin,
        index: day,
        fullData: locale.weekdays,
        maxLength: 2,
    });
};
formatTokenFunctions['ddd'] = function (date, locale, format) {
    var day = date.day();
    return getShort({
        date: date,
        format: format,
        data: locale.weekdaysShort,
        index: day,
        fullData: locale.weekdays,
        maxLength: 3,
    });
};
formatTokenFunctions['dddd'] = function (date, locale, format) {
    var day = date.day();
    return getShort({
        date: date,
        format: format,
        data: locale.weekdays,
        index: day,
    });
};
formatTokenFunctions['e'] = function (date) {
    return "".concat(date.weekday());
};
formatTokenFunctions['E'] = function (date) {
    return "".concat(date.isoWeekday());
};
function hFormat(hours) {
    return hours % 12 || 12;
}
function kFormat(hours) {
    return hours || 24;
}
formatTokenFunctions['H'] = function (date) {
    return "".concat(date.hour());
};
formatTokenFunctions['HH'] = function (date) {
    return zeroPad(date.hour(), 2);
};
formatTokenFunctions['h'] = function (date) {
    return "".concat(hFormat(date.hour()));
};
formatTokenFunctions['hh'] = function (date) {
    return zeroPad(hFormat(date.hour()), 2);
};
formatTokenFunctions['k'] = function (date) {
    return "".concat(kFormat(date.hour()));
};
formatTokenFunctions['kk'] = function (date) {
    return zeroPad(kFormat(date.hour()), 2);
};
formatTokenFunctions['hmm'] = function (date) {
    return "".concat(hFormat(date.hour())).concat(zeroPad(date.minute(), 2));
};
formatTokenFunctions['hmmss'] = function (date) {
    return "".concat(hFormat(date.hour())).concat(zeroPad(date.minute(), 2)).concat(zeroPad(date.second(), 2));
};
formatTokenFunctions['Hmm'] = function (date) {
    return "".concat(date.hour()).concat(zeroPad(date.minute(), 2));
};
formatTokenFunctions['Hmmss'] = function (date) {
    return "".concat(date.hour()).concat(zeroPad(date.minute(), 2)).concat(zeroPad(date.second(), 2));
};
function meridiem(hour, _minute, isLowercase) {
    var m = hour < 12 ? 'AM' : 'PM';
    return isLowercase ? m.toLowerCase() : m;
}
formatTokenFunctions['a'] = function (date, locale) {
    var func = locale.meridiem || meridiem;
    return func(date.hour(), date.minute(), true);
};
formatTokenFunctions['A'] = function (date, locale) {
    var func = locale.meridiem || meridiem;
    return func(date.hour(), date.minute(), false);
};
formatTokenFunctions['Z'] = function (date) {
    var offset = date.utcOffset();
    var sign = '+';
    if (offset < 0) {
        offset = -offset;
        sign = '-';
    }
    // eslint-disable-next-line no-bitwise
    return "".concat(sign).concat(zeroPad(~~(offset / 60), 2), ":").concat(zeroPad(~~offset % 60, 2));
};
formatTokenFunctions['ZZ'] = function (date) {
    var offset = date.utcOffset();
    var sign = '+';
    if (offset < 0) {
        offset = -offset;
        sign = '-';
    }
    // eslint-disable-next-line no-bitwise
    return "".concat(sign).concat(zeroPad(~~(offset / 60), 2)).concat(zeroPad(~~offset % 60, 2));
};
formatTokenFunctions['Q'] = function (date) {
    return "".concat(date.quarter());
};
formatTokenFunctions['Qo'] = function (date, locale) {
    var _a;
    // dayjs locales ordinal method returns value inside brackets '[' ']'
    return removeFormattingTokens("".concat((_a = locale.ordinal) === null || _a === void 0 ? void 0 : _a.call(locale, date.quarter(), 'Q')));
};
formatTokenFunctions['D'] = function (date) {
    return "".concat(date.date());
};
formatTokenFunctions['DD'] = function (date) {
    return zeroPad(date.date(), 2);
};
formatTokenFunctions['Do'] = function (date, locale) {
    var _a;
    // dayjs locales ordinal method returns value inside brackets '[' ']'
    return removeFormattingTokens("".concat((_a = locale.ordinal) === null || _a === void 0 ? void 0 : _a.call(locale, date.date(), 'D')));
};
formatTokenFunctions['m'] = function (date) {
    return "".concat(date.minute());
};
formatTokenFunctions['mm'] = function (date) {
    return zeroPad(date.minute(), 2);
};
formatTokenFunctions['s'] = function (date) {
    return "".concat(date.second());
};
formatTokenFunctions['ss'] = function (date) {
    return zeroPad(date.second(), 2);
};
formatTokenFunctions['S'] = function (date) {
    // eslint-disable-next-line no-bitwise
    return "".concat(~~(date.millisecond() / 100));
};
formatTokenFunctions['SS'] = function (date) {
    // eslint-disable-next-line no-bitwise
    return "".concat(~~(date.millisecond() / 10));
};
formatTokenFunctions['SSS'] = function (date) {
    return zeroPad(date.millisecond(), 3);
};
formatTokenFunctions['SSSS'] = function (date) {
    return zeroPad(date.millisecond() * 10, 4);
};
formatTokenFunctions['SSSSS'] = function (date) {
    return zeroPad(date.millisecond() * 100, 5);
};
formatTokenFunctions['SSSSSS'] = function (date) {
    return zeroPad(date.millisecond() * 1000, 6);
};
formatTokenFunctions['SSSSSSS'] = function (date) {
    return zeroPad(date.millisecond() * 10000, 7);
};
formatTokenFunctions['SSSSSSSS'] = function (date) {
    return zeroPad(date.millisecond() * 100000, 8);
};
formatTokenFunctions['SSSSSSSSS'] = function (date) {
    return zeroPad(date.millisecond() * 1000000, 9);
};
formatTokenFunctions['x'] = function (date) {
    return "".concat(date.valueOf());
};
formatTokenFunctions['X'] = function (date) {
    return "".concat(date.unix());
};
formatTokenFunctions['z'] = function (date) {
    return (0, timeZone_1.parseZoneInfo)({
        ts: date.valueOf(),
        locale: date.locale(),
        timeZone: date.timeZone(),
        offsetFormat: 'short',
    });
};
formatTokenFunctions['zz'] = function (date) {
    return (0, timeZone_1.parseZoneInfo)({
        ts: date.valueOf(),
        locale: date.locale(),
        timeZone: date.timeZone(),
        offsetFormat: 'long',
    });
};
formatTokenFunctions['DDD'] = function (date) {
    return "".concat(date.dayOfYear());
};
formatTokenFunctions['DDDD'] = function (date) {
    return zeroPad(date.dayOfYear(), 3);
};
formatTokenFunctions['DDDo'] = function (date, locale) {
    var _a;
    // dayjs locales ordinal method returns value inside brackets '[' ']'
    return removeFormattingTokens("".concat((_a = locale.ordinal) === null || _a === void 0 ? void 0 : _a.call(locale, date.dayOfYear(), 'DDD')));
};
formatTokenFunctions['gg'] = function (date) {
    return zeroPad(date.weekYear() % 100, 2);
};
formatTokenFunctions['gggg'] = function (date) {
    return zeroPad(date.weekYear(), 4);
};
formatTokenFunctions['ggggg'] = function (date) {
    return zeroPad(date.weekYear(), 5);
};
formatTokenFunctions['GG'] = function (date) {
    return zeroPad(date.isoWeekYear() % 100, 2);
};
formatTokenFunctions['GGGG'] = function (date) {
    return zeroPad(date.isoWeekYear(), 4);
};
formatTokenFunctions['GGGGG'] = function (date) {
    return zeroPad(date.isoWeekYear(), 5);
};
function getShort(_a) {
    var date = _a.date, format = _a.format, data = _a.data, index = _a.index, fullData = _a.fullData, maxLength = _a.maxLength;
    var value = '';
    if (data) {
        value = typeof data === 'function' ? data(date, format) : data[index];
    }
    if (!value && fullData) {
        value = typeof fullData === 'function' ? fullData(date, format) : fullData[index];
        if (value) {
            value = value.slice(0, maxLength);
        }
    }
    if (value) {
        return value;
    }
    throw new Error('Invalid locale data');
}
function zeroPad(number, targetLength, forceSign) {
    if (forceSign === void 0) { forceSign = false; }
    var absNumber = String(Math.abs(number));
    var sign = '';
    if (number < 0) {
        sign = '-';
    }
    else if (forceSign) {
        sign = '+';
    }
    return "".concat(sign).concat(absNumber.padStart(targetLength, '0'));
}
