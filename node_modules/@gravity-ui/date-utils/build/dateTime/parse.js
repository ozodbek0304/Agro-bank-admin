"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimestampFromObject = exports.getTimestampFromArray = void 0;
var timeZone_1 = require("../timeZone");
var utils_1 = require("../utils");
function getTimestampFromArray(input, timezone) {
    if (input.length === 0) {
        return getTimestampFromObject({}, timezone);
    }
    var dateParts = input.map(Number);
    var year = dateParts[0], _a = dateParts[1], month = _a === void 0 ? 0 : _a, _b = dateParts[2], date = _b === void 0 ? 1 : _b, _c = dateParts[3], hour = _c === void 0 ? 0 : _c, _d = dateParts[4], minute = _d === void 0 ? 0 : _d, _e = dateParts[5], second = _e === void 0 ? 0 : _e, _f = dateParts[6], millisecond = _f === void 0 ? 0 : _f;
    return getTimestampFromObject({ year: year, month: month, date: date, hour: hour, minute: minute, second: second, millisecond: millisecond }, timezone);
}
exports.getTimestampFromArray = getTimestampFromArray;
var defaultUnitValues = {
    year: 1,
    month: 1,
    date: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0,
};
var orderedUnits = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond'];
function getTimestampFromObject(input, timezone) {
    var _a;
    var normalized = (0, utils_1.normalizeDateComponents)(input, utils_1.normalizeComponent);
    normalized.date = (_a = normalized.day) !== null && _a !== void 0 ? _a : normalized.date;
    var objNow = (0, utils_1.tsToObject)(Date.now(), (0, timeZone_1.timeZoneOffset)(timezone, Date.now()));
    var foundFirst = false;
    for (var _i = 0, orderedUnits_1 = orderedUnits; _i < orderedUnits_1.length; _i++) {
        var unit = orderedUnits_1[_i];
        if (normalized[unit] !== undefined) {
            foundFirst = true;
        }
        else if (foundFirst) {
            normalized[unit] = defaultUnitValues[unit];
        }
        else {
            normalized[unit] = objNow[unit];
        }
    }
    var _b = (0, timeZone_1.fixOffset)((0, utils_1.objToTS)(normalized), (0, timeZone_1.timeZoneOffset)(timezone, Date.now()), timezone), ts = _b[0], offset = _b[1];
    return [ts, offset];
}
exports.getTimestampFromObject = getTimestampFromObject;
