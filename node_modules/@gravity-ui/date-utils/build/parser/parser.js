"use strict";
// Copyright 2015 Grafana Labs
// Copyright 2021 YANDEX LLC
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValid = exports.dateTimeParse = exports.isLikeRelative = void 0;
var dateTime_1 = require("../dateTime");
var settings_1 = require("../settings");
function isLikeRelative(text) {
    return typeof text === 'string' && settings_1.settings.getRelativeParser().isLikeRelative(text);
}
exports.isLikeRelative = isLikeRelative;
var parseInput = function (input, options) {
    var _a;
    if (isLikeRelative(input)) {
        var allowRelative = (_a = options === null || options === void 0 ? void 0 : options.allowRelative) !== null && _a !== void 0 ? _a : true;
        if (!allowRelative) {
            return undefined;
        }
        var parser = settings_1.settings.getRelativeParser();
        return parser.parse(input, options);
    }
    var _b = options || {}, format = _b.format, lang = _b.lang;
    var date = (0, dateTime_1.dateTime)({ input: input, format: format, lang: lang, timeZone: options === null || options === void 0 ? void 0 : options.timeZone });
    return date.isValid() ? date : undefined;
};
/**
 * Parses a number, text or Date to a DateTime value. If a timeZone is supplied the incoming value
 * is parsed with that timeZone as a base.
 *
 * It can also parse the relative date and time format, e.g. now-6h will be parsed as Date.now() - 6 hours and
 * returned as a valid DateTime value.
 *
 * If no options are supplied, then default values are used. For more details please see DateTimeOptionsWhenParsing.
 *
 * @param input - should be a parsable date and time input.
 * @param options
 */
var dateTimeParse = function (input, options) {
    if (!input) {
        return undefined;
    }
    var date = parseInput(input, options);
    return date;
};
exports.dateTimeParse = dateTimeParse;
/**
 * Checks if value is a valid date which in this context means that it is either
 * a DateTime instance or it can be parsed by parse function.
 * @param value value to parse.
 */
function isValid(value) {
    if ((0, dateTime_1.isDateTime)(value)) {
        return value.isValid();
    }
    var date = (0, exports.dateTimeParse)(value, { allowRelative: true });
    if (!date) {
        return false;
    }
    return date.isValid();
}
exports.isValid = isValid;
