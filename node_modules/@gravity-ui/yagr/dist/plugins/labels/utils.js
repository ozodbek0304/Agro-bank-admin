"use strict";
/* eslint-disable complexity, @typescript-eslint/no-loop-func, no-nested-ternary */
Object.defineProperty(exports, "__esModule", { value: true });
exports.drawLabelOnPoint = exports.renderPointLabel = exports.renderAxisLabel = exports.getId = exports.defaultPositionTop = void 0;
const common_1 = require("../../YagrCore/utils/common");
const defaultPositionTop = (u, x, y, scale) => {
    return [u.valToPos(x, 'x'), u.valToPos(y, scale) - 15];
};
exports.defaultPositionTop = defaultPositionTop;
const getId = () => (x) => String(x);
exports.getId = getId;
function renderAxisLabel({ yagr, scaleKey, x, y, className = '', render, onRender, onDestroy, label, }) {
    var _a;
    const over = yagr.root.querySelector('.u-over');
    if (render) {
        return render(yagr, x, y, label);
    }
    const labelValue = label.label ? (typeof label.label === 'function' ? label.label(label) : label.label) : '';
    const div = (0, common_1.html)('div', {
        class: `yagr-label ${className}`,
        style: {
            visibility: 'hidden',
        },
    }, labelValue !== null && labelValue !== void 0 ? labelValue : label.value.toString());
    over.append(div);
    if (scaleKey === 'x') {
        div.style.top = (0, common_1.px)(y - div.clientHeight / 2);
        div.style.left = (0, common_1.px)(x - div.clientWidth / 2);
    }
    else {
        if (((_a = yagr.config.axes[scaleKey]) === null || _a === void 0 ? void 0 : _a.side) === 'right') {
            div.style.left = (0, common_1.px)(x - div.clientWidth / 2);
        }
        else {
            div.style.left = (0, common_1.px)(x);
        }
        div.style.top = (0, common_1.px)(y - div.clientHeight / 2);
    }
    div.style.visibility = 'visible';
    onRender && onRender(div);
    return () => {
        onDestroy && onDestroy(div);
        div.remove();
    };
}
exports.renderAxisLabel = renderAxisLabel;
function renderPointLabel({ yagr, label, x, y, className = '', shifts = {}, onRender, onDestroy, }) {
    const over = yagr.root.querySelector('.u-over');
    const div = (0, common_1.html)('div', {
        class: `yagr-label ${className}`,
        style: {
            top: (0, common_1.px)(y + (shifts.top || 0)),
            left: (0, common_1.px)(x + (shifts.left || 0)),
        },
    }, label);
    over.append(div);
    onRender && onRender(div);
    div.style.left = (0, common_1.px)(Number(div.style.left.replace('px', '')) - div.clientWidth / 2);
    return () => {
        div.remove();
        onDestroy && onDestroy(div);
    };
}
exports.renderPointLabel = renderPointLabel;
function drawLabelOnPoint(yagr, serieIdx, xIdx, scaleKey, labelOptions, xAxisFormatter, selfAxisFormatter, onDraw) {
    const x = yagr.uplot.data[0][xIdx];
    const y = yagr.uplot.data[serieIdx][xIdx];
    if ((0, common_1.isNil)(y) || !scaleKey || !labelOptions) {
        return;
    }
    const valX = xAxisFormatter(x);
    const valY = selfAxisFormatter(y);
    const label = typeof labelOptions.label === 'function'
        ? labelOptions.label(x, y, xIdx)
        : labelOptions.label || `(${valX}, ${valY})`;
    if (labelOptions.render) {
        const clear = labelOptions.render(yagr, serieIdx, xIdx, scaleKey, labelOptions);
        clear && onDraw && onDraw(clear, label !== null && label !== void 0 ? label : '', serieIdx);
        return;
    }
    if (!label || (0, common_1.isNil)(y)) {
        return;
    }
    const [xP, yP] = labelOptions.position
        ? labelOptions.position(x, y)
        : (0, exports.defaultPositionTop)(yagr.uplot, x, y, scaleKey);
    const prev = yagr.uplot.data[serieIdx][xIdx - 1];
    const next = yagr.uplot.data[serieIdx][xIdx + 1];
    const className = prev !== null && prev !== undefined && next !== null && next !== undefined
        ? y < prev && y < next
            ? '_bottom'
            : '_top'
        : '_top';
    let clear = () => { };
    if (labelOptions.show !== false) {
        clear = renderPointLabel({
            yagr,
            label,
            x: xP,
            y: yP,
            className,
            onRender: labelOptions.onRender,
            onDestroy: labelOptions.onDestroy,
        });
    }
    onDraw && onDraw(clear, label, serieIdx);
}
exports.drawLabelOnPoint = drawLabelOnPoint;
