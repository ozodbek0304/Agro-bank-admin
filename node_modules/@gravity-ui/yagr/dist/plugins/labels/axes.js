"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.axisDrawBasedLabels = void 0;
const utils_1 = require("./utils");
const common_1 = require("../../YagrCore/utils/common");
function axisDrawBasedLabels(yagr, hooks, options) {
    let pointsClears = [];
    function onDrawAxes(u) {
        pointsClears.forEach((fn) => fn());
        pointsClears = [];
        Object.entries(options.axes || {}).forEach(([scaleKey, opts]) => {
            const axis = u.axes.find((a) => a.scale === scaleKey);
            if (!axis) {
                return;
            }
            opts.forEach((opt) => {
                var _a;
                let x, y;
                if (scaleKey === 'x') {
                    x = u.valToPos(opt.value, 'x');
                    y = u.valToPos(0, 'y');
                }
                else {
                    if (((_a = yagr.config.axes[scaleKey]) === null || _a === void 0 ? void 0 : _a.side) === 'right') {
                        x = u.valToPos(u.data[0][u.data[0].length - 1], 'x');
                    }
                    else {
                        x = u.valToPos(u.data[0][0], 'x');
                    }
                    y = u.valToPos(opt.value, 'y');
                }
                pointsClears.push((0, utils_1.renderAxisLabel)({
                    yagr,
                    scaleKey,
                    x,
                    y,
                    render: opt.render,
                    label: opt,
                    className: opt.className,
                    onRender: opt.onRender,
                    onDestroy: opt.onDestroy,
                }));
            });
        });
    }
    hooks.drawAxes = hooks.drawAxes || [];
    if (options.axes) {
        hooks.drawAxes.push(onDrawAxes);
    }
    return {
        getAxisLabels() {
            return options.axes || {};
        },
        getCurrentAxisLabels(proximity) {
            const cursor = yagr.uplot.cursor;
            if (!cursor) {
                return {};
            }
            const { left, top } = cursor;
            if ((0, common_1.isNil)(left) || (0, common_1.isNil)(top) || left < 0 || top < 0) {
                return {};
            }
            const labels = {};
            Object.entries(options.axes || {}).forEach(([scaleKey, opts]) => {
                const axis = yagr.uplot.axes.find((a) => a.scale === scaleKey);
                if (!axis) {
                    return;
                }
                opts.forEach((opt) => {
                    let x, y;
                    if (scaleKey === 'x') {
                        x = yagr.uplot.posToVal(left, 'x');
                        if (Math.abs(x - opt.value) < proximity.x) {
                            labels[scaleKey] = labels[scaleKey] || [];
                            labels[scaleKey].push(opt);
                        }
                    }
                    else {
                        y = yagr.uplot.posToVal(top, 'y');
                        if (Math.abs(y - opt.value) < proximity.y) {
                            labels[scaleKey] = labels[scaleKey] || [];
                            labels[scaleKey].push(opt);
                        }
                    }
                });
            });
            return labels;
        },
    };
}
exports.axisDrawBasedLabels = axisDrawBasedLabels;
