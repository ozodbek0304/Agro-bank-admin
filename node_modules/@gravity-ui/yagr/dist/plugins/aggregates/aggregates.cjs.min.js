/**
* Copyright (c) 2024, Yandex LLC
* All rights reserved. (MIT Licensed)
*
* Yagr@4.3.0
* High-performance HTML5 canvas chart renderer based on uPlot
* https://github.com/gravity-ui/yagr
*/

"use strict";var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__export=(r,i)=>{for(var o in i)__defProp(r,o,{get:i[o],enumerable:!0})},__copyProps=(r,i,o,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let l of __getOwnPropNames(i))!__hasOwnProp.call(r,l)&&l!==o&&__defProp(r,l,{get:()=>i[l],enumerable:!(t=__getOwnPropDesc(i,l))||t.enumerable});return r},__toCommonJS=r=>__copyProps(__defProp({},"__esModule",{value:!0}),r),aggregates_exports={};__export(aggregates_exports,{default:()=>aggregates_default}),module.exports=__toCommonJS(aggregates_exports);var DEFAULT_X_SCALE="x",DEFAULT_CANVAS_PIXEL_RATIO=typeof window>"u"?1:window.devicePixelRatio,DEFAULT_POINT_SIZE=DEFAULT_CANVAS_PIXEL_RATIO>=2?4:2,SECOND=1e3,MINUTE=SECOND*60,HOUR=MINUTE*60,DAY=HOUR*24,YEAR=DAY*365,DECADE=YEAR*10,X_AXIS_INCRS=[1,10,50,100,200,500,SECOND,SECOND*2,SECOND*5,SECOND*10,SECOND*15,SECOND*30,MINUTE,MINUTE*5,MINUTE*10,MINUTE*30,HOUR,HOUR*2,HOUR*3,HOUR*4,HOUR*6,HOUR*12,DAY,DAY*2,DAY*3,DAY*5,DAY*10,DAY*15,DAY*30,DAY*60,DAY*120,DAY*180,YEAR,YEAR*2,YEAR*5,YEAR*10];function integrate(r,i){if(r.length<2)return 0;let o=r[0],t=Number(i[0]),l,e,n=0;for(let u=1;u<r.length;u++){if(e=Number(i[u]),l=r[u],!Number.isNaN(e)&&!Number.isNaN(t)){const a=l-o,c=e-t,s=(t+c/2)*a;n+=s}o=l,t=e}return n}function countNumbers(r,i=0,o=r.length-1){let t=0;for(let l=i;l<=o;l++)typeof r[l]=="number"&&t++;return t}function getLast(r,i=0,o=r.length-1){for(let t=o;t>=i;t--){const l=r[t];if(l!==null&&typeof l=="number")return l}return null}var safeMin=(r,i=0,o=r.length-1)=>{if(r.length===0)return null;let t=null;for(let l=i;l<=o;l++){const e=r[l];e===null||typeof e=="string"||(t===null||e<t)&&(t=e)}return t},safeMax=(r,i=0,o=r.length-1)=>{if(r.length===0)return null;let t=null;for(let l=i;l<=o;l++){const e=r[l];e===null||typeof e=="string"||(t===null||e>t)&&(t=e)}return t},safeSum=(r,i=0,o=r.length-1)=>{if(r.length===0)return null;let t=null;for(let l=i;l<=o;l++){const e=r[l];e===null||typeof e=="string"||(t===null?t=e:t+=e)}return t},DataRef=r=>o=>{const t={},l={get:(e,n)=>{if(e===void 0&&n===void 0)return t;e===void 0&&(e=0),n===void 0&&(n=o.uplot.data[0].length-1);const u={};return o.uplot.series.forEach(({scale:a,id:c})=>{a===DEFAULT_X_SCALE||!a||(u[a]=u[a]||{},u[a].series=u[a].series||{},u[a].series[c]=l.calc(e,n,c))}),Object.keys(u).forEach(a=>{const c={min:safeMin(Object.values(u[a].series).map(({min:s})=>s)),max:safeMax(Object.values(u[a].series).map(({max:s})=>s)),sum:safeSum(Object.values(u[a].series).map(({sum:s})=>s)),avg:0,count:Object.values(u[a].series).reduce((s,{count:f})=>s+f,0),integral:Object.values(u[a].series).reduce((s,{integral:f})=>s+(f??0),0),last:0};c.avg=c.sum===null?null:c.sum/c.count,c.last=null,u[a].total=c}),u},calc:(e,n,u)=>{const a=o.state.y2uIdx[u],c=o.uplot.data[0].slice(e,n+1),s=o.uplot.series[a].$c,f=integrate(c,s.slice(e,n+1)),g=safeSum(s,e,n),v=safeMin(s,e,n),p=safeMax(s,e,n),_=countNumbers(s,e,n),m=g===null?null:g/_,b=getLast(s,e,n);return{min:v,max:p,sum:g,avg:m,count:_,integral:f,last:b}},uplot:{hooks:r.calcOnReady===!1?{}:{ready:e=>{Object.keys(e.scales).forEach(n=>{n!==DEFAULT_X_SCALE&&(t[n]={min:null,max:null,sum:null,avg:null,integral:null,count:0,last:null})}),e.series.forEach(({scale:n,$c:u,count:a})=>{if(n===DEFAULT_X_SCALE)return;const c=u.filter(p=>typeof p=="number"&&p!==null);t[n].min=safeMin([...c,t[n].min]),t[n].max=safeMax([...c,t[n].max]);const s=t[n].sum,f=safeSum(c);t[n].sum=s===null?safeSum(c):f===null?s:s+f,t[n].count+=a;const g=t[n].integral,v=integrate(e.data[0],u);t[n].integral=g===null?v:g+v}),Object.keys(t).forEach(n=>{const u=t[n].sum;t[n].avg=u===null?null:u/t[n].count})}}}};return l},aggregates_default=DataRef;typeof window<"u"&&Object.assign(window,{YagrAggregates:DataRef});
//# sourceMappingURL=aggregates.cjs.min.js.map
