import { YagrPlugin } from '../../types';
export type Aggregates = {
    min: number | null;
    max: number | null;
    sum: number | null;
    avg: number | null;
    count: number;
    integral: number | null;
    last: number | null;
};
export type AggregatesPerScale = Record<string, Aggregates>;
export type AggregatesPerSeries = Record<string, {
    series: Record<string, Aggregates>;
    total: Aggregates;
}>;
export type AggregatesPluginOptions = {
    /** Should calc aggregates on ready event (true by default) */
    calcOnReady?: boolean;
};
declare const DataRef: (opst: AggregatesPluginOptions) => YagrPlugin<{
    get: (from?: number, to?: number) => AggregatesPerScale | AggregatesPerSeries;
    calc: (from: number, to: number, id: string) => Aggregates;
}, []>;
export default DataRef;
