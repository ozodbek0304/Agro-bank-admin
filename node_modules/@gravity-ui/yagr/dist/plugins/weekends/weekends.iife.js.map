{
  "version": 3,
  "sources": ["../../../src/YagrCore/defaults.ts", "../../../src/plugins/weekends/weekends.ts"],
  "sourcesContent": ["import uPlot, {Padding} from 'uplot';\nimport {YagrTheme} from './types';\nimport type ColorParser from './utils/colors';\n\nexport const DEFAULT_X_SERIE_NAME = 'date';\nexport const DEFAULT_X_SCALE = 'x';\nexport const DEFAULT_Y_SCALE = 'y';\nexport const DEFAULT_FOCUS_ALPHA = 0.3;\nexport const DEFAULT_CANVAS_PIXEL_RATIO = typeof window === 'undefined' ? 1 : window.devicePixelRatio;\nexport const DEFAULT_MAX_TICKS = 5;\nexport const DEFAULT_Y_AXIS_OFFSET = 0.05;\nexport const DEFAULT_SCALE_MIN_RANGE = 0.01;\nexport const DEFAULT_LOGARITHMIC_MIN_SCALE_VALUE = 0.001;\nexport const DEFAULT_POINT_SIZE = DEFAULT_CANVAS_PIXEL_RATIO >= 2 ? 4 : 2;\n\nexport const DEFAULT_SYNC_KEY = 'sync';\nexport const DEFAULT_TITLE_FONT_SIZE = 14;\n\nexport const LIGHT_DEFAULT_LINE_COLOR = '#222222';\nexport const DARK_DEFAULT_LINE_COLOR = '#eeeeee';\n\nexport const DEFAULT_AXIS_FONT_SIZE = 11;\nexport const AXIS_LABEL_FONT = 'normal 11px Lucida Grande, Arial, Helvetica, sans-serif';\nexport const AXIS_VALUES_FONT = '11px Lucida Grande, Arial, Helvetica, sans-serif';\n\nexport const Y_AXIS_TICK_GAP = 6;\nexport const DEFAULT_Y_AXIS_SIZE = 12;\nexport const DEFAULT_Y_AXIS_PADDING = 12;\nexport const DEFAULT_Y_AXIS_LABEL_PADDING = 2;\nexport const Y_AXIS_SIZE = (self: uPlot, values: string[], axisIdx: number) => {\n    if (!values) {\n        return DEFAULT_Y_AXIS_SIZE;\n    }\n\n    const longesValue = values.reduce((l, c) => (l.length > c.length ? l : c));\n    const {ctx} = self;\n    ctx.save();\n    const axis = self.axes[axisIdx];\n\n    ctx.font = axis.font ? axis.font[0] : AXIS_VALUES_FONT;\n    const {width: textSize} = ctx.measureText(longesValue);\n    ctx.restore();\n\n    let labelSize = 0;\n    if (axis.label) {\n        labelSize = axis.labelSize || DEFAULT_AXIS_FONT_SIZE;\n\n        ctx.font = axis.labelFont ? axis.labelFont[0] : AXIS_LABEL_FONT;\n        const {fontBoundingBoxAscent: size} = ctx.measureText(axis.label);\n        labelSize = size;\n        ctx.restore();\n    }\n\n    return labelSize\n        ? textSize / DEFAULT_CANVAS_PIXEL_RATIO + labelSize / DEFAULT_CANVAS_PIXEL_RATIO + DEFAULT_Y_AXIS_LABEL_PADDING\n        : textSize / DEFAULT_CANVAS_PIXEL_RATIO + DEFAULT_Y_AXIS_PADDING;\n};\nexport const Y_AXIS_LABEL_SIZE = 11;\n\nexport const SECOND = 1000;\nexport const MINUTE = SECOND * 60;\nexport const HOUR = MINUTE * 60;\nexport const DAY = HOUR * 24;\nexport const YEAR = DAY * 365;\nexport const DECADE = YEAR * 10;\n\nexport const X_AXIS_TICK_GAP = 6;\nexport const X_AXIS_SIZE = 32;\nexport const X_AXIS_SPACE = 80;\nexport const X_AXIS_INCRS = [\n    // seconds divisors (# os ms)\n    1,\n    10,\n    50,\n    100,\n    200,\n    500,\n    // minute divisors\n    SECOND,\n    SECOND * 2,\n    SECOND * 5,\n    SECOND * 10,\n    SECOND * 15,\n    SECOND * 30,\n    // hour divisors\n    MINUTE,\n    MINUTE * 5,\n    MINUTE * 10,\n    MINUTE * 30,\n    // day divisors\n    HOUR,\n    HOUR * 2,\n    HOUR * 3,\n    HOUR * 4,\n    HOUR * 6,\n    HOUR * 12,\n    // month divisors\n    DAY,\n    DAY * 2,\n    DAY * 3,\n    DAY * 5,\n    DAY * 10,\n    DAY * 15,\n    DAY * 30,\n    DAY * 60,\n    DAY * 120,\n    DAY * 180,\n    // year divisors\n    YEAR,\n    YEAR * 2,\n    YEAR * 5,\n    YEAR * 10,\n];\n\nexport const TYPES_ORDER = ['dots', 'line', 'area', 'column'];\n\nexport const BARS_DRAW_FACTOR = 0.5;\nexport const BARS_DRAW_MAX = 100;\n\nexport const PADDING_LEFT: Padding = [14, 14, 0, 4];\nexport const PADDING_RIGHT: Padding = [14, 4, 0, 14];\nexport const PADDING_BOTH: Padding = [14, 4, 0, 4];\n\nexport const SERIE_COLOR = 'rgba(0, 0, 0, 1)';\nexport const SERIE_LINE_WIDTH = 2;\nexport const SERIE_AREA_BORDER_COLOR = 'rgba(0, 0, 0, 0.2)';\nexport const SERIE_AREA_BORDER_WIDTH = 1;\n\nexport const MARKER_DIAMETER = 8;\nexport const CURSOR_STYLE = '1px solid #ffa0a0';\n\nexport const MIN_SELECTION_WIDTH = 15;\n\nconst LIGHTEN_COLOR_SHIFT = 0.68;\nconst DARKEN_COLOR_SHIFT = -0.6;\n\nexport default class ThemedDefaults {\n    theme?: YagrTheme;\n    colors: ColorParser;\n\n    constructor(colors: ColorParser, theme: YagrTheme = 'light') {\n        this.setTheme(theme);\n        this.colors = colors;\n    }\n\n    setTheme(theme: YagrTheme) {\n        this.theme = theme;\n    }\n\n    get GRID() {\n        return {\n            show: true,\n            stroke: () => this.colors.parse('--yagr-grid'),\n            width: 1,\n        };\n    }\n\n    get X_AXIS_TICKS() {\n        return {size: 8, ...this.GRID};\n    }\n\n    get Y_AXIS_TICKS() {\n        return {size: 6, ...this.GRID};\n    }\n\n    get AXIS_STROKE() {\n        return this.colors.parse('--yagr-axis-stroke');\n    }\n\n    get BACKGROUND() {\n        return this.colors.parse('--yagr-background');\n    }\n\n    get SHIFT() {\n        return this.theme?.startsWith('light') ? LIGHTEN_COLOR_SHIFT : DARKEN_COLOR_SHIFT;\n    }\n\n    get DEFAULT_LINE_COLOR() {\n        return this.theme?.startsWith('light') ? LIGHT_DEFAULT_LINE_COLOR : DARK_DEFAULT_LINE_COLOR;\n    }\n}\n\nexport const TOOLTIP_Y_OFFSET = 24;\nexport const TOOLTIP_X_OFFSET = 24;\nexport const TOOLTIP_DEFAULT_MAX_LINES = 10;\nexport const TIME_MULTIPLIER = 1;", "import type {YagrPlugin} from '../../types';\nimport type Yagr from '../../index';\nimport {TIME_MULTIPLIER} from '../../YagrCore/defaults';\n\nexport interface WeekendsPluginOptions {\n    color?: string;\n    predicate?: (timestamp: number) => boolean;\n    label?: string;\n}\n\nconst DEFAULT_WEEKEND_COLOR = 'rgb(250, 255, 0, 0.38)';\n\n\ndeclare module '../../types' {\n    interface PBandConfig {\n        label?: string;\n    }\n\n    interface PLineConfig {\n        label?: string;\n    }\n}\n\n/**\n * This plugin highlights weekend ranges using native PlotLines plugin\n */\nexport default function WeekendsPlugin({\n    color = DEFAULT_WEEKEND_COLOR,\n    label,\n    predicate,\n}: WeekendsPluginOptions = {}): YagrPlugin {\n    return (yagr: Yagr) => {\n        const weekends: [start: number, end: number][] = [];\n\n        let inWeekend = false;\n        for (const ts of yagr.config.timeline) {\n            let isWeekend = false;\n\n            if (predicate) {\n                isWeekend = predicate(ts);\n            } else {\n                const date = new Date(ts / (yagr.config.chart?.timeMultiplier || TIME_MULTIPLIER));\n                const dayOfWeek = date.getDay();\n                isWeekend = dayOfWeek === 6 || dayOfWeek === 0;\n            }\n\n            if (isWeekend && !inWeekend) {\n                weekends.push([ts, ts]);\n                inWeekend = true;\n            }\n\n            if (!isWeekend && inWeekend) {\n                weekends[weekends.length - 1][1] = ts;\n                inWeekend = false;\n            }\n        }\n\n        yagr.plugins.plotLines?.add(\n            weekends.map((val) => ({\n                scale: 'x',\n                value: val,\n                color,\n                label: label ?? yagr.utils.i18n('weekend')\n            })),\n        );\n\n        return {\n            uplot: {\n                hooks: {},\n            },\n        };\n    };\n}\n\nif (typeof window !== 'undefined') {\n    Object.assign(window, {WeekendsPlugin});\n}\n"],
  "mappings": ";;;;;;;;;;;;AAQO,MAAM,6BAA6B,OAAO,WAAW,cAAc,IAAI,OAAO;AAK9E,MAAM,qBAAqB,8BAA8B,IAAI,IAAI;AA8CjE,MAAM,SAAS;AACf,MAAM,SAAS,SAAS;AACxB,MAAM,OAAO,SAAS;AACtB,MAAM,MAAM,OAAO;AACnB,MAAM,OAAO,MAAM;AACnB,MAAM,SAAS,OAAO;AAKtB,MAAM,eAAe;AAAA;AAAA,IAExyEO,MAAM,kBAAkB;;;AC/K/B,MAAM,wBAAwB;AAgBf,WAAR,eAAgC;AAAA,IACnC,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,EACJ,IAA2B,CAAC,GAAe;AACvC,WAAO,CAAC,SAAe;AACnB,YAAM,WAA2C,CAAC;AAElD,UAAI,YAAY;AAChB,iBAAW,MAAM,KAAK,OAAO,UAAU;AACnC,YAAI,YAAY;AAEhB,YAAI,WAAW;AACX,sBAAY,UAAU,EAAE;AAAA,QAC5B,OAAO;AACH,gBAAM,OAAO,IAAI,KAAK,MAAM,KAAK,OAAO,OAAO,kBAAkB,gBAAgB;AACjF,gBAAM,YAAY,KAAK,OAAO;AAC9B,sBAAY,cAAc,KAAK,cAAc;AAAA,QACjD;AAEA,YAAI,aAAa,CAAC,WAAW;AACzB,mBAAS,KAAK,CAAC,IAAI,EAAE,CAAC;AACtB,sBAAY;AAAA,QAChB;AAEA,YAAI,CAAC,aAAa,WAAW;AACzB,mBAAS,SAAS,SAAS,CAAC,EAAE,CAAC,IAAI;AACnC,sBAAY;AAAA,QAChB;AAAA,MACJ;AAEA,WAAK,QAAQ,WAAW;AAAA,QACpB,SAAS,IAAI,CAAC,SAAS;AAAA,UACnB,OAAO;AAAA,UACP,OAAO;AAAA,UACP;AAAA,UACA,OAAO,SAAS,KAAK,MAAM,KAAK,SAAS;AAAA,QAC7C,EAAE;AAAA,MACN;AAEA,aAAO;AAAA,QACH,OAAO;AAAA,UACH,OAAO,CAAC;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,OAAO,WAAW,aAAa;AAC/B,WAAO,OAAO,QAAQ,EAAC,eAAc,CAAC;AAAA,EAC1C;",
  "names": []
}
