"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pathsRenderer = void 0;
const uplot_1 = __importDefault(require("uplot"));
const defaults = __importStar(require("../defaults"));
/*
 * Configures and return apropriate path renderer
 * by given serieIndex and two points
 */
function pathsRenderer(u, seriesIdx, idx0, idx1) {
    const serie = u.series[seriesIdx];
    const { type, interpolation } = serie;
    let drawer;
    switch (type) {
        case 'column': {
            drawer =
                uplot_1.default.paths.bars &&
                    uplot_1.default.paths.bars({
                        size: [defaults.BARS_DRAW_FACTOR, defaults.BARS_DRAW_MAX],
                        ...(u.series[seriesIdx].renderOptions || {}),
                    });
            break;
        }
        case 'dots': {
            drawer = () => null;
            break;
        }
        case 'line':
        case 'area':
        default: {
            switch (interpolation) {
                case 'smooth':
                    drawer = uplot_1.default.paths.spline && uplot_1.default.paths.spline();
                    break;
                case 'left':
                    drawer = uplot_1.default.paths.stepped && uplot_1.default.paths.stepped({ align: 1 });
                    break;
                case 'right': {
                    drawer = uplot_1.default.paths.stepped && uplot_1.default.paths.stepped({ align: -1 });
                    break;
                }
                case 'linear':
                default:
                    drawer = uplot_1.default.paths.linear && uplot_1.default.paths.linear();
                    break;
            }
        }
    }
    return drawer ? drawer(u, seriesIdx, idx0, idx1) : null;
}
exports.pathsRenderer = pathsRenderer;
