"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasOneVisibleLine = void 0;
const defaults_1 = require("../../defaults");
const common_1 = require("../../utils/common");
const events_1 = require("../../utils/events");
const ALL_SERIES_IDX = 'null';
const PAGINATION_BUTTON_HEIGHT = 18;
const TOTAL_LEGEND_VERTICAL_PADDING_BOTTOM = 20;
const TOTAL_LEGEND_VERTICAL_PADDING_TOP = 48;
const DEFAULT_FONT_SIZE = 12;
const DEFAULT_LEGEND_PLACE_RATIO = 0.3;
const hasOneVisibleLine = (series) => {
    return series.some(({ show, id }) => id !== defaults_1.DEFAULT_X_SERIE_NAME && show);
};
exports.hasOneVisibleLine = hasOneVisibleLine;
const getPrependingTitle = (i18n, series) => {
    return series.length > 3 && i18n((0, exports.hasOneVisibleLine)(series) ? 'hide-all' : 'show-all');
};
const getPrependingTitleId = (series) => {
    return (series.length > 3 && ALL_SERIES_IDX) || undefined;
};
class LegendPlugin {
    constructor() {
        this.pagesCount = 0;
        this.state = {
            page: 0,
            pages: 1,
            pageSize: 0,
            rowsPerPage: 1,
            paginated: false,
            requiredSpace: 0,
            totalSpace: 0,
        };
        this.itemsHtml = '';
        this.preInit = (yagr, options, uplotOptions) => {
            this.yagr = yagr;
            this.options = Object.assign({
                show: false,
                position: 'bottom',
                fontSize: DEFAULT_FONT_SIZE,
                maxLegendSpace: DEFAULT_LEGEND_PLACE_RATIO,
                className: undefined,
                behaviour: 'basic',
            }, options || {});
            this.calc(uplotOptions);
        };
        this.init = (u) => {
            var _a;
            if (!this.options.show) {
                return;
            }
            this.uplot = u;
            /** Removing native uPlot legend */
            (_a = u.root.querySelector('.u-legend')) === null || _a === void 0 ? void 0 : _a.remove();
            this.render();
        };
        this.update = () => {
            const series = this.yagr.root.querySelectorAll('[data-serie-id]');
            series.forEach((serieNode) => {
                var _a, _b;
                const serieId = serieNode.getAttribute('data-serie-id');
                if (!serieId || serieId === ALL_SERIES_IDX) {
                    return;
                }
                const serieVisible = (_b = (_a = this.uplot) === null || _a === void 0 ? void 0 : _a.series[this.yagr.state.y2uIdx[serieId]]) === null || _b === void 0 ? void 0 : _b.show;
                serieNode.classList[serieVisible ? 'remove' : 'add']('yagr-legend__item_hidden');
            });
        };
        this.measureLegend = (body) => {
            const rootEl = this.yagr.root;
            const pseudo = (0, common_1.html)('div', {
                class: 'yagr-legend',
                style: { visibility: 'hidden' },
            }, body);
            rootEl.appendChild(pseudo);
            const items = pseudo.childNodes[0];
            const result = items.getBoundingClientRect();
            pseudo.remove();
            return result;
        };
        this.nextPage = () => {
            const { state } = this;
            this.state.page += 1;
            if (this.items) {
                this.items.style.transform = `translate(0, ${-1 * state.page * state.pageSize}px)`;
                this.renderPagination();
            }
        };
        this.prevPage = () => {
            const { state } = this;
            this.state.page -= 1;
            if (this.items) {
                this.items.style.transform = `translate(0, ${-1 * state.page * state.pageSize}px)`;
                this.renderPagination();
            }
        };
    }
    redraw() {
        if (!this.options.show) {
            return;
        }
        this.render();
    }
    destroy() {
        var _a;
        if (this._onDestroy) {
            this._onDestroy();
        }
        (_a = this.legendEl) === null || _a === void 0 ? void 0 : _a.remove();
    }
    applyHandlers() {
        const { yagr, uplot: u } = this;
        if (!u) {
            return () => { };
        }
        const series = yagr.root.querySelectorAll('[data-serie-id]');
        const unsubsribe = [];
        const onSerieClickBasic = (serieNode) => () => {
            const serieId = serieNode.getAttribute('data-serie-id');
            const seriesToToggle = [];
            if (serieId === ALL_SERIES_IDX) {
                const nextToggleState = !(0, exports.hasOneVisibleLine)(u.series);
                for (let idx = 1; idx < u.series.length; idx++) {
                    seriesToToggle.push([u.series[idx], nextToggleState]);
                }
            }
            else {
                const serie = u.series.find(({ id }) => id === serieId);
                if (!serie) {
                    return;
                }
                seriesToToggle.push([serie, !serie.show]);
            }
            seriesToToggle.forEach(([serie, nextState]) => {
                if (serie.show === nextState) {
                    return;
                }
                const node = yagr.root.querySelector(`[data-serie-id="${serie.id}"]`);
                yagr.setVisible(serie.id, nextState, false);
                node === null || node === void 0 ? void 0 : node.classList[nextState ? 'remove' : 'add']('yagr-legend__item_hidden');
            });
            const allSeriesItem = yagr.root.querySelector('.yagr-legend__all-series');
            if (allSeriesItem) {
                const title = getPrependingTitle(this.yagr.utils.i18n, u.series);
                allSeriesItem.innerHTML = title || '';
            }
        };
        const onSerieClickExtended = (serieNode) => {
            const changeVisibility = (id, visibility) => {
                const node = yagr.root.querySelector(`[data-serie-id="${id}"]`);
                yagr.setVisible(id, visibility, false);
                node === null || node === void 0 ? void 0 : node.classList[visibility ? 'remove' : 'add']('yagr-legend__item_hidden');
            };
            const toggleSerie = (serie) => {
                changeVisibility(serie.id, !serie.show);
            };
            const selectSerie = (serie) => {
                this.state.startSerieRange = serie;
                const otherSeries = u.series.filter((s) => s.id !== serie.id);
                const otherVisibility = !(0, exports.hasOneVisibleLine)(otherSeries) && serie.show !== false;
                u.series.forEach((s) => {
                    const visibility = serie.id === s.id ? true : otherVisibility;
                    changeVisibility(s.id, visibility);
                });
            };
            const selectRange = (serie) => {
                // If startSerieRange is undefined then startSerieRange = first valid legend element
                if (!this.state.startSerieRange) {
                    this.state.startSerieRange = u.series[1];
                }
                const range = [];
                u.series.forEach((s, i) => {
                    var _a;
                    if (s.id === serie.id) {
                        range.push(i);
                    }
                    // There is no 'else' because exist case when startSerieRange and target serie are same elements
                    if (s.id === ((_a = this.state.startSerieRange) === null || _a === void 0 ? void 0 : _a.id)) {
                        range.push(i);
                    }
                });
                u.series.forEach((s, i) => {
                    const visibility = i >= range[0] && i <= range[1];
                    changeVisibility(s.id, visibility);
                });
            };
            return (e) => {
                const serieId = serieNode.getAttribute('data-serie-id');
                const serie = u.series.find(({ id }) => id === serieId);
                if (!serie) {
                    return;
                }
                e.preventDefault();
                if (e.ctrlKey || e.metaKey) {
                    toggleSerie(serie);
                }
                else if (e.shiftKey) {
                    selectRange(serie);
                }
                else {
                    selectSerie(serie);
                }
            };
        };
        const onSerieClick = {
            basic: onSerieClickBasic,
            extended: onSerieClickExtended,
        };
        const onSerieMouseEnter = (serieNode) => () => {
            const serieId = serieNode.getAttribute('data-serie-id');
            if (serieNode.classList.contains('yagr-legend__item_hidden') || serieId === ALL_SERIES_IDX) {
                return;
            }
            const targetSerie = this.yagr.uplot.series.find(({ id }) => id === serieId);
            if (targetSerie) {
                yagr.setFocus(targetSerie.id, true);
            }
        };
        const onSerieMouseLeave = () => {
            yagr.setFocus(null, true);
        };
        series.forEach((serieNode) => {
            const onClick = onSerieClick[this.options.behaviour || 'basic'](serieNode);
            const onFocus = onSerieMouseEnter(serieNode);
            serieNode.addEventListener('click', onClick);
            serieNode.addEventListener('mouseenter', onFocus);
            serieNode.addEventListener('mouseleave', onSerieMouseLeave);
            serieNode.addEventListener('mousedown', events_1.preventMouseEvents);
            unsubsribe.push(() => {
                serieNode.removeEventListener('click', onClick);
                serieNode.removeEventListener('mouseenter', onFocus);
                serieNode.removeEventListener('mouseleave', onSerieMouseLeave);
                serieNode.removeEventListener('mousedown', events_1.preventMouseEvents);
            });
        });
        const destroy = () => unsubsribe.forEach((fn) => fn());
        this._onDestroy = destroy;
        return destroy;
    }
    render() {
        var _a, _b;
        let reRender = false;
        const { uplot: u, options } = this;
        if (!u) {
            return;
        }
        let legendEl = this.yagr.root.querySelector('.yagr-legend');
        if (legendEl) {
            reRender = true;
        }
        else {
            legendEl = (0, common_1.html)('div', {
                class: `yagr-legend yagr-legend__${this.options.position} ${(options === null || options === void 0 ? void 0 : options.className) || ''}`,
            });
        }
        if (!legendEl) {
            return;
        }
        if (!reRender) {
            if (options.position === 'top') {
                u.root.before(legendEl);
            }
            else {
                (_a = u.root) === null || _a === void 0 ? void 0 : _a.after(legendEl);
            }
        }
        this.legendEl = legendEl;
        if (!this.itemsHtml || reRender) {
            this.calc(this.yagr.options);
        }
        legendEl.innerHTML = `<div class="yagr-legend__container" style="height: ${this.state.requiredSpace}px">${this.itemsHtml}</div>`;
        this.items = legendEl.querySelector('.yagr-legend__items');
        this.container = legendEl.querySelector('.yagr-legend__container');
        if (this.state.paginated) {
            const pagination = this.renderPagination();
            (_b = this.container) === null || _b === void 0 ? void 0 : _b.after(pagination);
        }
        else {
            this.items.style.justifyContent = 'center';
        }
        this.applyHandlers();
    }
    renderPagination() {
        const { state } = this;
        let pagination = this.yagr.root.querySelector('.yagr-legend__pagination');
        if (pagination) {
            const nextPage = pagination.querySelector('.yagr-legend__icon-down');
            const prevPage = pagination.querySelector('.yagr-legend__icon-up');
            nextPage.removeEventListener('click', this.nextPage);
            prevPage.removeEventListener('click', this.prevPage);
        }
        else {
            pagination = (0, common_1.html)('div', {
                class: 'yagr-legend__pagination',
            });
        }
        const upClassName = state.page === 0 ? 'yagr-legend__icon-up_disabled' : '';
        const downClassName = state.page === state.pages - 1 ? 'yagr-legend__icon-down_disabled' : '';
        pagination.innerHTML = `<span class="yagr-legend__icon-up ${upClassName}"></span>
<span class="yagr-legend__pagination-text">${state.page + 1}/${state.pages}</span>
<span class="yagr-legend__icon-down ${downClassName}"></span>`;
        const nextPage = pagination.querySelector('.yagr-legend__icon-down');
        const prevPage = pagination.querySelector('.yagr-legend__icon-up');
        if (!downClassName) {
            nextPage.addEventListener('click', this.nextPage);
        }
        if (!upClassName) {
            prevPage.addEventListener('click', this.prevPage);
        }
        return pagination;
    }
    createIconLineElement(serie) {
        const iconLineElement = (0, common_1.html)('span', {
            class: `yagr-legend__icon yagr-legend__icon_${serie.type}`,
            style: { 'background-color': serie.color },
        });
        return iconLineElement;
    }
    createSerieNameElement(serie) {
        const serieNameElement = (0, common_1.html)('span');
        serieNameElement.innerText = serie.name || 'unnamed';
        return serieNameElement;
    }
    renderItems(uplotOptions) {
        const title = getPrependingTitle(this.yagr.utils.i18n, uplotOptions.series);
        const titleId = this.options.behaviour !== 'extended' && getPrependingTitleId(uplotOptions.series);
        const series = titleId ? [titleId] : [];
        for (let i = 1; i < uplotOptions.series.length; i++) {
            series.push(uplotOptions.series[i]);
        }
        const content = series
            .map((serie) => {
            let serieContent;
            let sId;
            let additionalCn = ' ';
            if (serie === ALL_SERIES_IDX) {
                serieContent = title;
                sId = titleId;
                additionalCn = ' yagr-legend__all-series ';
            }
            else {
                sId = serie.id;
                const icon = this.createIconLineElement(serie);
                const name = this.createSerieNameElement(serie);
                serieContent = `${icon.outerHTML}${name.outerHTML}`;
            }
            const visible = typeof serie === 'string' ? true : serie.show !== false;
            return `<div class="yagr-legend__item${additionalCn}${visible ? '' : 'yagr-legend__item_hidden'}" data-serie-id="${sId}">${serieContent}</div>`;
        })
            .join('');
        return `<div class="yagr-legend__items">${content}</div>`;
    }
    calc(uplotOptions) {
        if (!this.options.show) {
            return;
        }
        const chartHeight = uplotOptions.height - this.VERTICAL_PADDING;
        const html = this.renderItems(uplotOptions);
        const { height: requiredHeight } = this.measureLegend(html);
        const rowHeight = this.options.fontSize + 2;
        const maxPossiblePlace = chartHeight * this.options.maxLegendSpace;
        const rowsPerPage = Math.floor(maxPossiblePlace / rowHeight);
        const itemsRowsPerPage = rowsPerPage - 1;
        const itemsPageSize = Math.min(itemsRowsPerPage * rowHeight, maxPossiblePlace);
        const paginatedPageSize = Math.min(rowsPerPage * rowHeight, maxPossiblePlace);
        const paginated = requiredHeight > itemsPageSize && itemsPageSize > 0;
        const requiredSpace = Math.min(paginated ? paginatedPageSize : itemsPageSize, requiredHeight);
        const pages = Math.ceil(requiredHeight / itemsPageSize);
        const additionalSpace = paginated ? this.VERTICAL_PADDING + PAGINATION_BUTTON_HEIGHT : this.VERTICAL_PADDING;
        this.state.requiredSpace = requiredSpace;
        this.state.totalSpace = requiredSpace + additionalSpace;
        this.state.paginated = paginated;
        this.state.page = this.state.page || 0;
        this.state.pages = pages;
        this.state.pageSize = itemsPageSize;
        this.state.rowsPerPage = rowsPerPage;
        this.itemsHtml = html;
    }
    get VERTICAL_PADDING() {
        return this.options.position === 'bottom'
            ? TOTAL_LEGEND_VERTICAL_PADDING_BOTTOM
            : TOTAL_LEGEND_VERTICAL_PADDING_TOP;
    }
}
exports.default = LegendPlugin;
