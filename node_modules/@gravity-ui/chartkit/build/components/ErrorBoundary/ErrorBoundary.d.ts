import React from 'react';
import type { ChartKitError } from '../../libs';
import type { ChartKitOnError, ChartKitType, ChartKitWidget, RenderError } from '../../types';
type Props = {
    onError?: ChartKitOnError;
    data: ChartKitWidget[ChartKitType]['data'];
    renderError?: RenderError;
};
type State = {
    error?: ChartKitError | Error;
};
export declare class ErrorBoundary extends React.Component<Props, State> {
    static getDerivedStateFromError(error: Error): {
        error: Error;
    };
    state: State;
    componentDidCatch(): void;
    componentDidUpdate(prevProps: Readonly<Props>): void;
    render(): React.ReactNode;
    resetError: () => void;
}
export {};
