import React from 'react';
import { CHARTKIT_ERROR_CODE } from '../../libs';
import { getErrorMessage } from '../../utils/getErrorMessage';
export class ErrorBoundary extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            error: undefined,
        };
        this.resetError = () => {
            if (this.state.error) {
                this.setState({ error: undefined });
            }
        };
    }
    static getDerivedStateFromError(error) {
        return { error };
    }
    componentDidCatch() {
        var _a, _b;
        const { error } = this.state;
        if (error) {
            (_b = (_a = this.props).onError) === null || _b === void 0 ? void 0 : _b.call(_a, { error });
        }
    }
    componentDidUpdate(prevProps) {
        if (prevProps.data !== this.props.data) {
            const { error } = this.state;
            if (error && 'code' in error && error.code === CHARTKIT_ERROR_CODE.NO_DATA) {
                this.resetError();
            }
        }
    }
    render() {
        const { error } = this.state;
        if (error) {
            const message = getErrorMessage(error);
            if (this.props.renderError) {
                return this.props.renderError({
                    error,
                    message,
                    resetError: this.resetError,
                });
            }
            return React.createElement("div", null, message);
        }
        return this.props.children;
    }
}
