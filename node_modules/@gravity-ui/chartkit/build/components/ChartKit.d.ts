import React from 'react';
import type { ChartKitProps, ChartKitRef, ChartKitType } from '../types';
import './ChartKit.css';
type ChartKitComponentProps<T extends ChartKitType> = Omit<ChartKitProps<T>, 'onError'> & {
    instanceRef?: React.ForwardedRef<ChartKitRef | undefined>;
};
declare const ChartKitComponent: <T extends keyof import("../types").ChartKitWidget>(props: ChartKitComponentProps<T>) => React.JSX.Element;
export declare const ChartKit: <T extends keyof import("../types").ChartKitWidget>(props: {
    type: T;
    data: import("../types").ChartKitWidget[T]["data"];
    id?: string | undefined;
    isMobile?: boolean | undefined;
    onLoad?: ((data?: import("../types").ChartKitOnLoadData<T> | undefined) => void) | undefined;
    onRender?: ((data: import("../types").ChartKitOnRenderData) => void) | undefined;
    onChartLoad?: ((data: import("../types").ChartKitOnChartLoad<T>) => void) | undefined;
    onError?: import("../types").ChartKitOnError | undefined;
    renderError?: import("../types").RenderError | undefined;
    renderPluginLoader?: import("../types").ChartKitRenderPluginLoader | undefined;
} & { [key in keyof Omit<import("../types").ChartKitWidget[T], "data" | "widget">]: import("../types").ChartKitWidget[T][key]; } & {
    ref?: React.ForwardedRef<ChartKitRef | undefined> | undefined;
}) => ReturnType<typeof ChartKitComponent>;
export {};
