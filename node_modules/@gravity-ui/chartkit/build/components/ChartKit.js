import { __rest } from "tslib";
import React from 'react';
import { i18n } from '../i18n';
import { CHARTKIT_ERROR_CODE, ChartKitError, settings } from '../libs';
import { getRandomCKId, typedMemo } from '../utils';
import { cn } from '../utils/cn';
import { ErrorBoundary } from './ErrorBoundary/ErrorBoundary';
import { Loader } from './Loader/Loader';
import './ChartKit.css';
const b = cn('chartkit');
const ChartKitComponent = (props) => {
    const widgetRef = React.useRef();
    const { instanceRef, id: propsId, type, isMobile, renderPluginLoader } = props, restProps = __rest(props, ["instanceRef", "id", "type", "isMobile", "renderPluginLoader"]);
    const ckId = React.useMemo(() => getRandomCKId(), []);
    const id = propsId || ckId;
    const lang = settings.get('lang');
    const plugins = settings.get('plugins');
    const plugin = plugins.find((iteratedPlugin) => iteratedPlugin.type === type);
    if (!plugin) {
        throw new ChartKitError({
            code: CHARTKIT_ERROR_CODE.UNKNOWN_PLUGIN,
            message: i18n('error', 'label_unknown-plugin', { type }),
        });
    }
    const ChartComponent = plugin.renderer;
    React.useImperativeHandle(instanceRef, () => ({
        reflow(details) {
            var _a;
            if ((_a = widgetRef.current) === null || _a === void 0 ? void 0 : _a.reflow) {
                widgetRef.current.reflow(details);
            }
        },
    }), []);
    return (React.createElement(React.Suspense, { fallback: React.createElement(Loader, { renderPluginLoader: renderPluginLoader }) },
        React.createElement("div", { className: b({ mobile: isMobile }, 'chartkit-theme_common') },
            React.createElement(ChartComponent, Object.assign({ ref: widgetRef, id: id, lang: lang }, restProps)))));
};
const ChartKitComponentWithErrorBoundary = React.forwardRef(function ChartKitComponentWithErrorBoundary(props, ref) {
    return (React.createElement(ErrorBoundary, { onError: props.onError, data: props.data, renderError: props.renderError },
        React.createElement(ChartKitComponent, Object.assign({ instanceRef: ref }, props))));
}) /* https://stackoverflow.com/a/58473012 */;
export const ChartKit = typedMemo(ChartKitComponentWithErrorBoundary);
