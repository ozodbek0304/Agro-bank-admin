import isObject from 'lodash/isObject';
import mergeWith from 'lodash/mergeWith';
// @ts-ignore
export function mergeSettingStrategy(objValue, srcValue, key) {
    if (key === 'plugins') {
        const currentPlugins = [...objValue];
        const newPlugins = [...srcValue];
        // modify existing plugins
        let newSettingsPlugins = currentPlugins.map((currentPlugin) => {
            const newPluginIndex = newPlugins.findIndex(({ type }) => type === currentPlugin.type);
            if (newPluginIndex !== -1) {
                const newPlugin = newPlugins[newPluginIndex];
                newPlugins.splice(newPluginIndex, 1);
                return {
                    type: currentPlugin.type,
                    renderer: newPlugin.renderer,
                };
            }
            return currentPlugin;
        });
        // add new plugins if it exist after modified
        if (newPlugins.length > 0) {
            newSettingsPlugins = [...newSettingsPlugins, ...newPlugins];
        }
        return newSettingsPlugins;
    }
    if (isObject(objValue)) {
        return mergeWith(objValue, srcValue, mergeSettingStrategy);
    }
    return srcValue;
}
