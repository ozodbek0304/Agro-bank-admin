/* eslint no-console: ["error", { allow: ["warn", "error"]}] */
import React from 'react';
import afterFrame from 'afterframe';
import { measurePerformance } from '../../../../utils';
import { useElementSize } from './useElementSize';
const useIsomorphicLayoutEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;
export const HighchartsReact = React.memo(React.forwardRef(function HighchartsReact(props, ref) {
    const { onRender } = props;
    const containerRef = React.useRef(null);
    const chartRef = React.useRef();
    const { width, height } = useElementSize(containerRef);
    const performanceMeasure = React.useRef(measurePerformance());
    useIsomorphicLayoutEffect(() => {
        function createChart() {
            const { highcharts: HighchartsComponent } = props;
            const constructorType = props.constructorType || 'chart';
            if (!HighchartsComponent) {
                console.warn('The "highcharts" property was not passed.');
            }
            else if (!HighchartsComponent[constructorType]) {
                console.warn('The "constructorType" property is incorrect or some ' +
                    'required module is not imported.');
            }
            else if (props.options) {
                // @ts-expect-error
                chartRef.current = HighchartsComponent[constructorType](containerRef.current, props.options, props.callback);
            }
            else {
                console.warn('The "options" property was not passed.');
            }
        }
        if (!chartRef.current) {
            createChart();
        }
    }, [
        props.options,
        props.allowChartUpdate,
        props.containerProps,
        props.highcharts,
        props.constructorType,
    ]);
    useIsomorphicLayoutEffect(() => {
        return () => {
            if (chartRef.current) {
                chartRef.current.destroy();
                chartRef.current = null;
            }
        };
    }, []);
    React.useImperativeHandle(ref, () => ({
        get chart() {
            return chartRef.current;
        },
        container: containerRef,
    }), []);
    React.useLayoutEffect(() => {
        if (width && height) {
            if (!performanceMeasure.current) {
                performanceMeasure.current = measurePerformance();
            }
            afterFrame(() => {
                var _a;
                const renderTime = (_a = performanceMeasure.current) === null || _a === void 0 ? void 0 : _a.end();
                if (typeof renderTime === 'number') {
                    onRender === null || onRender === void 0 ? void 0 : onRender({ renderTime });
                }
                performanceMeasure.current = null;
            });
        }
    }, [width, height, onRender]);
    return React.createElement("div", Object.assign({}, props.containerProps, { ref: containerRef }));
}));
HighchartsReact.displayName = 'HighchartsReact';
export default HighchartsReact;
