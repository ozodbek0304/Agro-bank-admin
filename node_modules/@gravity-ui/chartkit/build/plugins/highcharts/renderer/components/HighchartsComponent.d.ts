import React from 'react';
import Highcharts, { Chart, ChartCallbackFunction, Options } from 'highcharts';
import type { ChartKitProps } from '../../../../types';
import type { HighchartsWidgetData, StringParams } from '../../types';
import './HighchartsComponent.css';
type Props = ChartKitProps<'highcharts'>;
type State = {
    prevData: HighchartsWidgetData | null;
    options: (Options & {
        useHighStock: boolean;
    }) | null;
    callback: ChartCallbackFunction | null;
    isError: boolean;
};
export declare class HighchartsComponent extends React.PureComponent<Props, State> {
    static defaultProps: Partial<Props>;
    static getDerivedStateFromProps(nextProps: Props, prevState: State): {
        prevData: HighchartsWidgetData;
        options: {
            chart: {
                type: any;
            } & {
                zoomType: string;
                backgroundColor: string;
                className: string;
            } & {
                events: {
                    render?: (() => void) | undefined;
                    load: () => void;
                    selection: () => void;
                    drilldown: () => void;
                    drillup: () => void;
                    click: (event: any) => void;
                    redraw: () => void;
                };
            };
            plotOptions: {
                [x: number]: {
                    stacking: any;
                };
            } & {
                series: {
                    borderColor: string;
                    label: {
                        enabled: boolean;
                    };
                    tooltip: {
                        headerFormat: string;
                        pointFormat: string;
                    };
                    dataLabels: {
                        style: {
                            textOutline: string;
                            color: string;
                        };
                    };
                    turboThreshold: number;
                };
                area: {
                    boostThreshold: number;
                } & {
                    states: {
                        hover: {
                            lineWidthPlus: number;
                        };
                    };
                    dataGrouping: {
                        approximation: string;
                    };
                    marker: {
                        enabled: boolean;
                        radius: number;
                        states: {
                            hover: {
                                radiusPlus: number;
                            };
                        };
                    };
                } & {
                    dataLabels: {
                        formatter: () => any;
                    };
                } & {
                    states: {
                        hover: {
                            animation: {
                                duration: number;
                                easing: string;
                            };
                            lineWidth: number;
                            opacity: number;
                        };
                        inactive: {
                            opacity: number;
                        };
                    };
                };
                areaspline: {
                    states: {
                        hover: {
                            lineWidthPlus: number;
                        };
                    };
                    dataGrouping: {
                        approximation: string;
                    };
                    marker: {
                        enabled: boolean;
                        radius: number;
                        states: {
                            hover: {
                                radiusPlus: number;
                            };
                        };
                    };
                };
                bar: {
                    states: {
                        hover: {
                            lineWidthPlus: number;
                        };
                    };
                    dataGrouping: {
                        approximation: string;
                    };
                    marker: {
                        enabled: boolean;
                        radius: number;
                        states: {
                            hover: {
                                radiusPlus: number;
                            };
                        };
                    };
                } & {
                    dataLabels: {
                        formatter: () => any;
                    };
                } & {
                    states: {
                        inactive: {
                            enabled: boolean;
                        };
                    };
                };
                column: {
                    states: {
                        hover: {
                            lineWidthPlus: number;
                        };
                    };
                    dataGrouping: {
                        approximation: string;
                    };
                    marker: {
                        enabled: boolean;
                        radius: number;
                        states: {
                            hover: {
                                radiusPlus: number;
                            };
                        };
                    };
                } & {
                    dataLabels: {
                        formatter: () => any;
                    };
                } & {
                    states: {
                        inactive: {
                            enabled: boolean;
                        };
                    };
                };
                line: {
                    states: {
                        hover: {
                            lineWidthPlus: number;
                        };
                    };
                    dataGrouping: {
                        approximation: string;
                    };
                    marker: {
                        enabled: boolean;
                        radius: number;
                        states: {
                            hover: {
                                radiusPlus: number;
                            };
                        };
                    };
                } & {
                    dataLabels: {
                        formatter: () => any;
                    };
                } & {
                    states: {
                        hover: {
                            animation: {
                                duration: number;
                                easing: string;
                            };
                            lineWidth: number;
                            opacity: number;
                        };
                        inactive: {
                            opacity: number;
                        };
                    };
                };
                spline: {
                    states: {
                        hover: {
                            lineWidthPlus: number;
                        };
                    };
                    dataGrouping: {
                        approximation: string;
                    };
                    marker: {
                        enabled: boolean;
                        radius: number;
                        states: {
                            hover: {
                                radiusPlus: number;
                            };
                        };
                    };
                };
                arearange: {
                    tooltip: {
                        pointFormat: string;
                    };
                } & {
                    states: {
                        hover: {
                            lineWidthPlus: number;
                        };
                    };
                    dataGrouping: {
                        approximation: string;
                    };
                    marker: {
                        enabled: boolean;
                        radius: number;
                        states: {
                            hover: {
                                radiusPlus: number;
                            };
                        };
                    };
                };
                scatter: {
                    tooltip: {
                        headerFormat: string;
                        pointFormat: string;
                    };
                };
                bubble: {
                    tooltip: {
                        headerFormat: string;
                        pointFormat: string;
                    };
                };
                sankey: {
                    tooltip: {
                        headerFormat: string;
                        pointFormat: string;
                    };
                };
                heatmap: {
                    tooltip: {
                        headerFormat: string;
                        pointFormat: string;
                    };
                };
                treemap: {
                    tooltip: {
                        headerFormat: null;
                        pointFormat: string;
                    };
                };
                timeline: {
                    tooltip: {
                        headerFormat: string;
                        pointFormat: string;
                    };
                };
                variwide: {};
                waterfall: {};
                pie: {
                    tooltip: {
                        headerFormat: null;
                        pointFormat: string;
                    };
                    dataLabels: {
                        formatter: () => any;
                    };
                } & {
                    allowPointSelect: boolean;
                    slicedOffset: number;
                    cursor: string;
                    showInLegend: boolean;
                } & {
                    states: {
                        inactive: {
                            enabled: boolean;
                        };
                    };
                };
                histogram: {
                    tooltip: {
                        headerFormat: null;
                        pointFormat: string;
                    };
                };
                bellcurve: {};
                streamgraph: {};
                ohlc: {
                    tooltip: {
                        pointFormat: string;
                    };
                };
                ema: {};
                sma: {};
                wordcloud: {
                    tooltip: {
                        pointFormat: string;
                    };
                };
                xrange: {
                    tooltip: {
                        headerFormat: string;
                        pointFormat: string;
                    };
                };
                solidgauge: {
                    allowPointSelect: boolean;
                    slicedOffset: number;
                    cursor: string;
                    showInLegend: boolean;
                };
                funnel: {
                    allowPointSelect: boolean;
                    slicedOffset: number;
                    cursor: string;
                    showInLegend: boolean;
                };
                boxplot: {
                    tooltip: {
                        pointFormat: string;
                    };
                };
            } & {
                xrange: {
                    stickyTracking: boolean;
                };
                series: {
                    events: {
                        legendItemClick: (event: Highcharts.SeriesLegendItemClickEventObject | Highcharts.PointLegendItemClickEventObject) => void;
                        mouseOver: () => void;
                        mouseOut: () => void;
                        click: (event: any) => void;
                    };
                    point: {
                        events: {
                            click: () => false;
                        };
                    };
                    marker: {
                        states: {
                            hover: {
                                enabled: boolean;
                            };
                            select: {
                                enabled: boolean;
                            };
                        };
                    } | {
                        states?: undefined;
                    };
                };
                pie: {
                    point: {
                        events: {
                            legendItemClick: (event: Highcharts.SeriesLegendItemClickEventObject | Highcharts.PointLegendItemClickEventObject) => void;
                        };
                    };
                };
            };
            title: {
                style: {
                    color: string;
                };
            } & {
                text: any;
                floating: any;
            };
            tooltip: {
                split: boolean;
                shared: boolean;
                outside: boolean;
                followPointer: boolean;
                dateTimeLabelFormats: {
                    millisecond: string;
                    second: string;
                    minute: string;
                    hour: string;
                    day: string;
                    week: string;
                    quarter: string;
                };
            } & {
                replaceCellAt?: any;
                insertCellAt?: any;
                positioner?: typeof import("../helpers/config/config").portraitOrientationTooltipPositioner | undefined;
                shared: boolean;
                splitTooltip: any;
                distance: number;
                style: {
                    width: string;
                };
                className: string;
                outside: boolean;
            };
            legend: {
                itemStyle: {
                    color: string;
                };
                itemHoverStyle: {
                    color: string;
                };
                itemHiddenStyle: {
                    color: string;
                };
            } & ({
                alignColumns: boolean;
                labelFormatter: () => any;
                navigation: {
                    activeColor: string;
                    inactiveColor: string;
                    style: {
                        color: string;
                    };
                };
                title: {
                    style: {
                        color: string;
                    };
                };
            } | {
                enabled: boolean;
            });
            xAxis: {
                crosshair: boolean;
                gridLineColor: string;
                lineColor: string;
                labels: {
                    style: {
                        color: string;
                    };
                };
                tickPixelInterval: number;
                tickColor: string;
                tickmarkPlacement: string;
                dateTimeLabelFormats: {
                    day: string;
                    week: string;
                    quarter: string;
                };
            } & {
                crosshair: boolean | {
                    width: number;
                    color: string;
                    zIndex: number;
                };
                labels: {
                    formatter: () => any;
                };
                events: {
                    setExtremes: () => void;
                };
            };
            yAxis: {
                gridLineColor: string;
                lineColor: string;
                labels: {
                    style: {
                        color: string;
                    };
                };
                tickColor: string;
                stackLabels: {
                    style: {
                        textOutline: string;
                        color: string;
                    };
                };
                title: {
                    style: {
                        color: string;
                    };
                };
            } & {
                crosshair: boolean | {
                    width: number;
                    color: string;
                    zIndex: number;
                };
                labels: {
                    formatter: () => any;
                };
            };
            exporting: {
                buttons: {
                    contextButton: {
                        enabled: boolean;
                    };
                };
            };
            rangeSelector: {
                enabled: boolean;
                inputEnabled: boolean;
            };
            scrollbar: {
                enabled: boolean;
                barBackgroundColor: string;
                barBorderColor: string;
                buttonArrowColor: string;
                buttonBorderColor: string;
                buttonBackgroundColor: string;
                trackBackgroundColor: string;
                trackBorderColor: string;
            };
            navigator: {
                height: number;
                outlineColor: string;
                xAxis: {
                    gridLineColor: string;
                };
                handles: {
                    backgroundColor: string;
                    borderColor: string;
                };
            } & {
                adaptToUpdatedData: boolean;
            };
            _config: any;
            subtitle: {
                text: any;
            };
            series: any;
            _externalComments: import("../../types").HighchartsComment[];
            _internalComments: import("../../types").HighchartsComment[];
        };
        callback: (chart: import("../../types").ExtendedHChart) => void;
        isError: boolean;
    } | {
        isError: boolean;
        prevData?: undefined;
        options?: undefined;
        callback?: undefined;
    } | null;
    state: State;
    private id?;
    private chartComponent;
    componentDidMount(): void;
    componentDidUpdate(): void;
    render(): React.JSX.Element | null;
    reflow: () => void;
    extendChartInstance: (chart: Chart) => void;
    getParams: () => StringParams;
    updateParams: (params: StringParams) => void;
    private getId;
    private onLoad;
    private needRenderCallback;
}
export {};
