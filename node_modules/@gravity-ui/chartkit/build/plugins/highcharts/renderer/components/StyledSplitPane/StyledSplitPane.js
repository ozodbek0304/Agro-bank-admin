import { __rest } from "tslib";
import React from 'react';
import SplitPane, { Pane } from 'react-split-pane';
import { cn } from '../../../../../utils/cn';
import './StyledSplitPane.css';
const b = cn('styled-split-pane');
const resizerClassName = b('pane-resizer');
export const StyledSplitPane = (_a) => {
    var { paneOneRender, paneTwoRender } = _a, splitPaneProps = __rest(_a, ["paneOneRender", "paneTwoRender"]);
    // https://github.com/tomkp/react-split-pane/blob/master/src/SplitPane.js#L307
    const splitPaneRef = React.useRef(null);
    React.useEffect(() => {
        var _a, _b;
        const resizer = (_b = (_a = splitPaneRef.current) === null || _a === void 0 ? void 0 : _a.splitPane) === null || _b === void 0 ? void 0 : _b.getElementsByClassName(resizerClassName)[0];
        const hoveredClassName = `${resizerClassName}_hovered`;
        const onTouchStart = () => {
            resizer === null || resizer === void 0 ? void 0 : resizer.classList.add(hoveredClassName);
        };
        const onTouchEnd = () => {
            resizer === null || resizer === void 0 ? void 0 : resizer.classList.remove(hoveredClassName);
        };
        resizer === null || resizer === void 0 ? void 0 : resizer.addEventListener('touchstart', onTouchStart);
        resizer === null || resizer === void 0 ? void 0 : resizer.addEventListener('touchend', onTouchEnd);
        return function cleanup() {
            resizer === null || resizer === void 0 ? void 0 : resizer.removeEventListener('touchstart', onTouchStart);
            resizer === null || resizer === void 0 ? void 0 : resizer.removeEventListener('touchend', onTouchEnd);
        };
    }, []);
    return (React.createElement(SplitPane, Object.assign({}, splitPaneProps, { ref: splitPaneRef, className: b(), resizerClassName: resizerClassName }),
        React.createElement(Pane, null, paneOneRender()),
        React.createElement(Pane, null, paneTwoRender())));
};
