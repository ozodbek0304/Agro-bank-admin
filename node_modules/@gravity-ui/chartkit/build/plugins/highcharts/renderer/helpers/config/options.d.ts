export default options;
declare namespace options {
    namespace chart {
        let zoomType: string;
        let backgroundColor: string;
        let className: string;
    }
    namespace title {
        namespace style {
            let color: string;
        }
    }
    namespace tooltip {
        let split: boolean;
        let shared: boolean;
        let outside: boolean;
        let followPointer: boolean;
        namespace dateTimeLabelFormats {
            let millisecond: string;
            let second: string;
            let minute: string;
            let hour: string;
            let day: string;
            let week: string;
            let quarter: string;
        }
    }
    namespace legend {
        namespace itemStyle {
            let color_1: string;
            export { color_1 as color };
        }
        namespace itemHoverStyle {
            let color_2: string;
            export { color_2 as color };
        }
        namespace itemHiddenStyle {
            let color_3: string;
            export { color_3 as color };
        }
    }
    namespace xAxis {
        export let crosshair: boolean;
        export let gridLineColor: string;
        export let lineColor: string;
        export namespace labels {
            export namespace style_1 {
                let color_4: string;
                export { color_4 as color };
            }
            export { style_1 as style };
        }
        export let tickPixelInterval: number;
        export let tickColor: string;
        export let tickmarkPlacement: string;
        export namespace dateTimeLabelFormats_1 {
            let day_1: string;
            export { day_1 as day };
            let week_1: string;
            export { week_1 as week };
            let quarter_1: string;
            export { quarter_1 as quarter };
        }
        export { dateTimeLabelFormats_1 as dateTimeLabelFormats };
    }
    namespace yAxis {
        let gridLineColor_1: string;
        export { gridLineColor_1 as gridLineColor };
        let lineColor_1: string;
        export { lineColor_1 as lineColor };
        export namespace labels_1 {
            export namespace style_2 {
                let color_5: string;
                export { color_5 as color };
            }
            export { style_2 as style };
        }
        export { labels_1 as labels };
        let tickColor_1: string;
        export { tickColor_1 as tickColor };
        export namespace stackLabels {
            export namespace style_3 {
                export let textOutline: string;
                let color_6: string;
                export { color_6 as color };
            }
            export { style_3 as style };
        }
        export namespace title_1 {
            export namespace style_4 {
                let color_7: string;
                export { color_7 as color };
            }
            export { style_4 as style };
        }
        export { title_1 as title };
    }
    namespace plotOptions {
        export namespace series {
            export let borderColor: string;
            export namespace label {
                let enabled: boolean;
            }
            export namespace tooltip_1 {
                let headerFormat: string;
                let pointFormat: string;
            }
            export { tooltip_1 as tooltip };
            export namespace dataLabels {
                export namespace style_5 {
                    let textOutline_1: string;
                    export { textOutline_1 as textOutline };
                    let color_8: string;
                    export { color_8 as color };
                }
                export { style_5 as style };
            }
            export let turboThreshold: number;
        }
        export let area: {
            boostThreshold: number;
        } & {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        } & {
            dataLabels: {
                formatter: () => any;
            };
        } & {
            states: {
                hover: {
                    animation: {
                        duration: number;
                        easing: string;
                    };
                    lineWidth: number;
                    opacity: number;
                };
                inactive: {
                    opacity: number;
                };
            };
        };
        export { first as areaspline };
        export let bar: {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        } & {
            dataLabels: {
                formatter: () => any;
            };
        } & {
            states: {
                inactive: {
                    enabled: boolean;
                };
            };
        };
        export let column: {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        } & {
            dataLabels: {
                formatter: () => any;
            };
        } & {
            states: {
                inactive: {
                    enabled: boolean;
                };
            };
        };
        export let line: {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        } & {
            dataLabels: {
                formatter: () => any;
            };
        } & {
            states: {
                hover: {
                    animation: {
                        duration: number;
                        easing: string;
                    };
                    lineWidth: number;
                    opacity: number;
                };
                inactive: {
                    opacity: number;
                };
            };
        };
        export { first as spline };
        export let arearange: {
            tooltip: {
                pointFormat: string;
            };
        } & {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        };
        export namespace scatter {
            export namespace tooltip_2 {
                let headerFormat_1: string;
                export { headerFormat_1 as headerFormat };
                let pointFormat_1: string;
                export { pointFormat_1 as pointFormat };
            }
            export { tooltip_2 as tooltip };
        }
        export namespace bubble {
            export namespace tooltip_3 {
                let headerFormat_2: string;
                export { headerFormat_2 as headerFormat };
                let pointFormat_2: string;
                export { pointFormat_2 as pointFormat };
            }
            export { tooltip_3 as tooltip };
        }
        export namespace sankey {
            export namespace tooltip_4 {
                let headerFormat_3: string;
                export { headerFormat_3 as headerFormat };
                let pointFormat_3: string;
                export { pointFormat_3 as pointFormat };
            }
            export { tooltip_4 as tooltip };
        }
        export namespace heatmap {
            export namespace tooltip_5 {
                let headerFormat_4: string;
                export { headerFormat_4 as headerFormat };
                let pointFormat_4: string;
                export { pointFormat_4 as pointFormat };
            }
            export { tooltip_5 as tooltip };
        }
        export namespace treemap {
            export namespace tooltip_6 {
                let headerFormat_5: null;
                export { headerFormat_5 as headerFormat };
                let pointFormat_5: string;
                export { pointFormat_5 as pointFormat };
            }
            export { tooltip_6 as tooltip };
        }
        export namespace timeline {
            export namespace tooltip_7 {
                let headerFormat_6: string;
                export { headerFormat_6 as headerFormat };
                let pointFormat_6: string;
                export { pointFormat_6 as pointFormat };
            }
            export { tooltip_7 as tooltip };
        }
        export let variwide: {};
        export let waterfall: {};
        export let pie: {
            tooltip: {
                headerFormat: null;
                pointFormat: string;
            };
            dataLabels: {
                formatter: () => any;
            };
        } & {
            allowPointSelect: boolean;
            slicedOffset: number;
            cursor: string;
            showInLegend: boolean;
        } & {
            states: {
                inactive: {
                    enabled: boolean;
                };
            };
        };
        export namespace histogram {
            export namespace tooltip_8 {
                let headerFormat_7: null;
                export { headerFormat_7 as headerFormat };
                let pointFormat_7: string;
                export { pointFormat_7 as pointFormat };
            }
            export { tooltip_8 as tooltip };
        }
        export let bellcurve: {};
        export let streamgraph: {};
        export namespace ohlc {
            export namespace tooltip_9 {
                let pointFormat_8: string;
                export { pointFormat_8 as pointFormat };
            }
            export { tooltip_9 as tooltip };
        }
        export let ema: {};
        export let sma: {};
        export namespace wordcloud {
            export namespace tooltip_10 {
                let pointFormat_9: string;
                export { pointFormat_9 as pointFormat };
            }
            export { tooltip_10 as tooltip };
        }
        export namespace xrange {
            export namespace tooltip_11 {
                let headerFormat_8: string;
                export { headerFormat_8 as headerFormat };
                let pointFormat_10: string;
                export { pointFormat_10 as pointFormat };
            }
            export { tooltip_11 as tooltip };
        }
        export { second as solidgauge };
        export { second as funnel };
        export namespace boxplot {
            export namespace tooltip_12 {
                let pointFormat_11: string;
                export { pointFormat_11 as pointFormat };
            }
            export { tooltip_12 as tooltip };
        }
    }
    namespace exporting {
        namespace buttons {
            namespace contextButton {
                let enabled_1: boolean;
                export { enabled_1 as enabled };
            }
        }
    }
    namespace rangeSelector {
        let enabled_2: boolean;
        export { enabled_2 as enabled };
        export let inputEnabled: boolean;
    }
    namespace scrollbar {
        let enabled_3: boolean;
        export { enabled_3 as enabled };
        export let barBackgroundColor: string;
        export let barBorderColor: string;
        export let buttonArrowColor: string;
        export let buttonBorderColor: string;
        export let buttonBackgroundColor: string;
        export let trackBackgroundColor: string;
        export let trackBorderColor: string;
    }
    namespace navigator {
        export let height: number;
        export let outlineColor: string;
        export namespace xAxis_1 {
            let gridLineColor_2: string;
            export { gridLineColor_2 as gridLineColor };
        }
        export { xAxis_1 as xAxis };
        export namespace handles {
            let backgroundColor_1: string;
            export { backgroundColor_1 as backgroundColor };
            let borderColor_1: string;
            export { borderColor_1 as borderColor };
        }
    }
}
declare namespace first {
    namespace states {
        namespace hover {
            let lineWidthPlus: number;
        }
    }
    namespace dataGrouping {
        let approximation: string;
    }
    namespace marker {
        let enabled_4: boolean;
        export { enabled_4 as enabled };
        export let radius: number;
        export namespace states_1 {
            export namespace hover_1 {
                let radiusPlus: number;
            }
            export { hover_1 as hover };
        }
        export { states_1 as states };
    }
}
declare namespace second_1 {
    let allowPointSelect: boolean;
    let slicedOffset: number;
    let cursor: string;
    let showInLegend: boolean;
}
