import Highcharts from 'highcharts';
import { drawComments, hideComments } from '../comments/drawing';
import { isNavigatorSeries } from './utils';
const getSeriesIdentifier = (item) => {
    if (item instanceof Highcharts.Point) {
        return item.name;
    }
    if (isNavigatorSeries(item) && item.baseSeries) {
        return item.baseSeries.userOptions.id || item.baseSeries.name;
    }
    return item.userOptions.id || item.name;
};
const needSetVisible = (seriesName, seriesVisible, chartSeries) => {
    if (!seriesVisible) {
        return false;
    }
    // TypeScript have problems when filter/map/reduce with union type arrays.
    // https://github.com/microsoft/TypeScript/issues/44373
    const hasAnotherVisibleSeries = chartSeries
        .filter((series) => series.options.showInLegend !== false && getSeriesIdentifier(series) !== seriesName)
        .some((series) => series.visible);
    return seriesVisible && !hasAnotherVisibleSeries;
};
const updateSeries = (series, chartSeries, type) => {
    const clickedSeriesName = getSeriesIdentifier(series);
    switch (type) {
        case 'extended': {
            chartSeries.forEach((item) => {
                if (getSeriesIdentifier(item) === clickedSeriesName) {
                    // Highcharts.Series has serVisible in types
                    // Highcharts.Point doesn't have this method in types
                    // but it has this method in __proto__ and it works
                    // @ts-ignore
                    item.setVisible(!item.visible, false);
                }
            });
            break;
        }
        case 'default': {
            const visible = needSetVisible(getSeriesIdentifier(series), series.visible, chartSeries);
            chartSeries.forEach((item) => {
                if (getSeriesIdentifier(item) === clickedSeriesName) {
                    // @ts-ignore
                    item.setVisible(true, false);
                }
                else {
                    // @ts-ignore
                    item.setVisible(visible, false);
                }
            });
            break;
        }
        default:
            break;
    }
};
const updateComments = (chart) => {
    setTimeout(() => hideComments(chart, chart.userOptions._getComments(), chart.userOptions._config), 0);
    setTimeout(() => drawComments(chart, chart.userOptions._getComments(), chart.userOptions._config), 0);
};
// https://api.highcharts.com/class-reference/Highcharts#.SeriesLegendItemClickCallbackFunction
export const handleLegendItemClick = (event) => {
    event.preventDefault();
    const series = event.target;
    const chart = series instanceof Highcharts.Point ? series.series.chart : series.chart;
    const chartSeries = series instanceof Highcharts.Point ? series.series.data : series.chart.series;
    if (isNavigatorSeries(series)) {
        return;
    }
    const isExtended = event.browserEvent.ctrlKey || event.browserEvent.metaKey;
    const type = isExtended ? 'extended' : 'default';
    updateSeries(series, chartSeries, type);
    updateComments(chart);
    chart.redraw();
};
