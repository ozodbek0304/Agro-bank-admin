import type { HighchartsSortData } from '../../../../types/widget';
export { addShowInNavigatorToSeries } from './addShowInNavigatorToSeries';
export { buildNavigatorFallback } from './buildNavigatorFallback';
export { calculatePrecision } from './calculatePrecision';
export { concatStrings } from './concatStrings';
export { getChartKitFormattedValue } from './getChartKitFormattedValue';
export { getFormatOptionsFromLine } from './getFormatOptionsFromLine';
export { getXAxisThresholdValue } from './getXAxisThresholdValue';
export * from './tooltip';
export { isNavigatorSeries } from './isNavigatorSeries';
export { isSafari } from './isSafari';
export { mergeArrayWithObject } from './mergeArrayWithObject';
export { numberFormat } from './numberFormat';
export { setNavigatorDefaultPeriod } from './setNavigatorDefaultPeriod';
export declare const getSortedData: <T extends Record<string, any>>(data: T[], sort?: HighchartsSortData) => (number | T | (() => IterableIterator<T>) | {
    [x: number]: boolean | undefined;
    length?: boolean | undefined;
    toString?: boolean | undefined;
    toLocaleString?: boolean | undefined;
    pop?: boolean | undefined;
    push?: boolean | undefined;
    concat?: boolean | undefined;
    join?: boolean | undefined;
    reverse?: boolean | undefined;
    shift?: boolean | undefined;
    slice?: boolean | undefined;
    sort?: boolean | undefined;
    splice?: boolean | undefined;
    unshift?: boolean | undefined;
    indexOf?: boolean | undefined;
    lastIndexOf?: boolean | undefined;
    every?: boolean | undefined;
    some?: boolean | undefined;
    forEach?: boolean | undefined;
    map?: boolean | undefined;
    filter?: boolean | undefined;
    reduce?: boolean | undefined;
    reduceRight?: boolean | undefined;
    find?: boolean | undefined;
    findIndex?: boolean | undefined;
    fill?: boolean | undefined;
    copyWithin?: boolean | undefined;
    entries?: boolean | undefined;
    keys?: boolean | undefined;
    values?: boolean | undefined;
    includes?: boolean | undefined;
    flatMap?: boolean | undefined;
    flat?: boolean | undefined;
    [Symbol.iterator]?: boolean | undefined;
    readonly [Symbol.unscopables]?: boolean | undefined;
    at?: boolean | undefined;
} | (() => string) | (() => string) | (() => T | undefined) | ((...items: T[]) => number) | {
    (...items: ConcatArray<T>[]): T[];
    (...items: (T | ConcatArray<T>)[]): T[];
} | ((separator?: string | undefined) => string) | (() => T[]) | (() => T | undefined) | ((start?: number | undefined, end?: number | undefined) => T[]) | ((compareFn?: ((a: T, b: T) => number) | undefined) => T[]) | {
    (start: number, deleteCount?: number | undefined): T[];
    (start: number, deleteCount: number, ...items: T[]): T[];
} | ((...items: T[]) => number) | ((searchElement: T, fromIndex?: number | undefined) => number) | ((searchElement: T, fromIndex?: number | undefined) => number) | {
    <S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];
    (predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;
} | ((predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any) => boolean) | ((callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any) => void) | (<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any) => U[]) | {
    <S_1 extends T>(predicate: (value: T, index: number, array: T[]) => value is S_1, thisArg?: any): S_1[];
    (predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];
} | {
    (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    <U_1>(callbackfn: (previousValue: U_1, currentValue: T, currentIndex: number, array: T[]) => U_1, initialValue: U_1): U_1;
} | {
    (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    <U_2>(callbackfn: (previousValue: U_2, currentValue: T, currentIndex: number, array: T[]) => U_2, initialValue: U_2): U_2;
} | {
    <S_2 extends T>(predicate: (value: T, index: number, obj: T[]) => value is S_2, thisArg?: any): S_2 | undefined;
    (predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;
} | ((predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any) => number) | ((value: T, start?: number | undefined, end?: number | undefined) => T[]) | ((target: number, start: number, end?: number | undefined) => T[]) | (() => IterableIterator<[number, T]>) | (() => IterableIterator<number>) | (() => IterableIterator<T>) | ((searchElement: T, fromIndex?: number | undefined) => boolean) | (<U_3, This = undefined>(callback: (this: This, value: T, index: number, array: T[]) => U_3 | readonly U_3[], thisArg?: This | undefined) => U_3[]) | (<A, D extends number = 1>(this: A, depth?: D | undefined) => FlatArray<A, D>[]) | ((index: number) => T | undefined))[];
