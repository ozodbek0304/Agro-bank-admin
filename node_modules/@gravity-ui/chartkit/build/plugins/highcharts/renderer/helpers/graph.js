import { addHolidays } from './add-holidays';
import { drawComments } from './comments/drawing';
import { prepareConfig } from './config/config';
import { initHighcharts } from './highcharts/highcharts';
import { prepareData } from './prepare-data';
import './graph.css';
let highchartsInitialized = false;
function getGraph({ options, data, comments, isMobile, holidays }) {
    if (!highchartsInitialized) {
        highchartsInitialized = true;
        initHighcharts({ isMobile });
    }
    prepareData(data, options, holidays);
    return {
        config: Object.assign({ _externalComments: (!options.disableExternalComments && comments) || [], _internalComments: data.comments || [] }, prepareConfig(data, options, isMobile, holidays)),
        callback: (chart) => {
            var _a, _b;
            if (!chart) {
                console.error('CHARTKIT_NO_CHART_CALLBACK');
                return;
            }
            chart.userOptions._getComments = () => { var _a, _b; return (_a = chart.userOptions) === null || _a === void 0 ? void 0 : _a._internalComments.concat((_b = chart.userOptions) === null || _b === void 0 ? void 0 : _b._externalComments); };
            let needRedraw = false;
            chart.series.forEach((serie) => {
                if (serie.userOptions.noCheckNullValues) {
                    return;
                }
                if (['line', 'spline', 'area', 'stack'].includes(serie.type) &&
                    !serie.options.connectNulls) {
                    const { data } = serie;
                    data.forEach((point, index) => {
                        if (point.y !== null &&
                            (data[index - 1] === undefined ||
                                // eslint-disable-next-line eqeqeq, no-eq-null
                                data[index - 1].y == null) &&
                            // eslint-disable-next-line eqeqeq, no-eq-null
                            (index === data.length - 1 || data[index + 1].y == null)) {
                            point.update({
                                marker: { enabled: true },
                                x: point.x,
                            }, false, false);
                            needRedraw = true;
                        }
                    });
                }
            });
            if (options.highstock) {
                let extmin;
                let extmax;
                if (options.extremes && options.extremes.min && options.extremes.max) {
                    extmin = options.extremes.min;
                    extmax = options.extremes.max;
                }
                else if (options.highstock.range_min && options.highstock.range_max) {
                    extmin = parseInt((options.highstock.override_range_min ||
                        options.highstock.range_min), 10);
                    extmax = parseInt((options.highstock.override_range_max ||
                        options.highstock.range_max), 10);
                }
                if (extmin && extmax) {
                    // https://github.com/highcharts/highcharts/issues/9028
                    const xAxis = chart.xAxis.find((xAxis) => !chart.navigator ||
                        xAxis !== chart.navigator.xAxis) || ((_a = chart.navigator) === null || _a === void 0 ? void 0 : _a.xAxis);
                    extmin = Math.max((_b = chart.xAxis[0]) === null || _b === void 0 ? void 0 : _b.dataMin, extmin);
                    extmax = Math.min(chart.xAxis[0].dataMax, extmax);
                    xAxis === null || xAxis === void 0 ? void 0 : xAxis.setExtremes(extmin, extmax, false, false);
                    needRedraw = true;
                }
            }
            if (holidays && !options.hideHolidaysBands) {
                if (needRedraw) {
                    addHolidays(chart, holidays);
                }
                else {
                    needRedraw = addHolidays(chart, holidays);
                }
            }
            if (needRedraw) {
                chart.redraw();
            }
            if (chart && chart.userOptions._getComments()) {
                drawComments(chart, chart.userOptions._getComments(), chart.userOptions._config);
            }
            chart.userOptions.isCallbackCalled = true;
        },
    };
}
export { getGraph };
