export function synchronizeTooltipTablesCellsWidth(tooltipContainer: any, isMobile: any): false | undefined;
export function isNavigatorSerie(serie: any): boolean;
export function buildLegend(options: any): {
    alignColumns: boolean;
    labelFormatter: () => any;
    navigation: {
        activeColor: string;
        inactiveColor: string;
        style: {
            color: string;
        };
    };
    title: {
        style: {
            color: string;
        };
    };
};
export function hasChartVisibleSeries(chart: any): any;
export function handleScroll(): false | undefined;
export function tooltipPositioner(tooltipWidth: any, tooltipHeight: any, point: any): {
    x: number;
    y: number;
};
export function portraitOrientationTooltipPositioner(tooltipWidth: any, tooltipHeight: any, point: any): {
    x: number;
    y: number;
};
export function getTooltipPositioner(isMobile: any): typeof portraitOrientationTooltipPositioner;
export function hideFixedTooltip(tooltip: any, isMobile: any): void;
export function prepareConfig(data: any, options: any, isMobile: any, holidays: any): {
    chart: {
        type: any;
    };
    plotOptions: {
        [x: number]: {
            stacking: any;
        };
    };
} & {
    chart: {
        zoomType: string;
        backgroundColor: string;
        className: string;
    };
    title: {
        style: {
            color: string;
        };
    };
    tooltip: {
        split: boolean;
        shared: boolean;
        outside: boolean;
        followPointer: boolean;
        dateTimeLabelFormats: {
            millisecond: string;
            second: string;
            minute: string;
            hour: string;
            day: string;
            week: string;
            quarter: string;
        };
    };
    legend: {
        itemStyle: {
            color: string;
        };
        itemHoverStyle: {
            color: string;
        };
        itemHiddenStyle: {
            color: string;
        };
    };
    xAxis: {
        crosshair: boolean;
        gridLineColor: string;
        lineColor: string;
        labels: {
            style: {
                color: string;
            };
        };
        tickPixelInterval: number;
        tickColor: string;
        tickmarkPlacement: string;
        dateTimeLabelFormats: {
            day: string;
            week: string;
            quarter: string;
        };
    };
    yAxis: {
        gridLineColor: string;
        lineColor: string;
        labels: {
            style: {
                color: string;
            };
        };
        tickColor: string;
        stackLabels: {
            style: {
                textOutline: string;
                color: string;
            };
        };
        title: {
            style: {
                color: string;
            };
        };
    };
    plotOptions: {
        series: {
            borderColor: string;
            label: {
                enabled: boolean;
            };
            tooltip: {
                headerFormat: string;
                pointFormat: string;
            };
            dataLabels: {
                style: {
                    textOutline: string;
                    color: string;
                };
            };
            turboThreshold: number;
        };
        area: {
            boostThreshold: number;
        } & {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        } & {
            dataLabels: {
                formatter: () => any;
            };
        } & {
            states: {
                hover: {
                    animation: {
                        duration: number;
                        easing: string;
                    };
                    lineWidth: number;
                    opacity: number;
                };
                inactive: {
                    opacity: number;
                };
            };
        };
        areaspline: {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        };
        bar: {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        } & {
            dataLabels: {
                formatter: () => any;
            };
        } & {
            states: {
                inactive: {
                    enabled: boolean;
                };
            };
        };
        column: {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        } & {
            dataLabels: {
                formatter: () => any;
            };
        } & {
            states: {
                inactive: {
                    enabled: boolean;
                };
            };
        };
        line: {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        } & {
            dataLabels: {
                formatter: () => any;
            };
        } & {
            states: {
                hover: {
                    animation: {
                        duration: number;
                        easing: string;
                    };
                    lineWidth: number;
                    opacity: number;
                };
                inactive: {
                    opacity: number;
                };
            };
        };
        spline: {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        };
        arearange: {
            tooltip: {
                pointFormat: string;
            };
        } & {
            states: {
                hover: {
                    lineWidthPlus: number;
                };
            };
            dataGrouping: {
                approximation: string;
            };
            marker: {
                enabled: boolean;
                radius: number;
                states: {
                    hover: {
                        radiusPlus: number;
                    };
                };
            };
        };
        scatter: {
            tooltip: {
                headerFormat: string;
                pointFormat: string;
            };
        };
        bubble: {
            tooltip: {
                headerFormat: string;
                pointFormat: string;
            };
        };
        sankey: {
            tooltip: {
                headerFormat: string;
                pointFormat: string;
            };
        };
        heatmap: {
            tooltip: {
                headerFormat: string;
                pointFormat: string;
            };
        };
        treemap: {
            tooltip: {
                headerFormat: null;
                pointFormat: string;
            };
        };
        timeline: {
            tooltip: {
                headerFormat: string;
                pointFormat: string;
            };
        };
        variwide: {};
        waterfall: {};
        pie: {
            tooltip: {
                headerFormat: null;
                pointFormat: string;
            };
            dataLabels: {
                formatter: () => any;
            };
        } & {
            allowPointSelect: boolean;
            slicedOffset: number;
            cursor: string;
            showInLegend: boolean;
        } & {
            states: {
                inactive: {
                    enabled: boolean;
                };
            };
        };
        histogram: {
            tooltip: {
                headerFormat: null;
                pointFormat: string;
            };
        };
        bellcurve: {};
        streamgraph: {};
        ohlc: {
            tooltip: {
                pointFormat: string;
            };
        };
        ema: {};
        sma: {};
        wordcloud: {
            tooltip: {
                pointFormat: string;
            };
        };
        xrange: {
            tooltip: {
                headerFormat: string;
                pointFormat: string;
            };
        };
        solidgauge: {
            allowPointSelect: boolean;
            slicedOffset: number;
            cursor: string;
            showInLegend: boolean;
        };
        funnel: {
            allowPointSelect: boolean;
            slicedOffset: number;
            cursor: string;
            showInLegend: boolean;
        };
        boxplot: {
            tooltip: {
                pointFormat: string;
            };
        };
    };
    exporting: {
        buttons: {
            contextButton: {
                enabled: boolean;
            };
        };
    };
    rangeSelector: {
        enabled: boolean;
        inputEnabled: boolean;
    };
    scrollbar: {
        enabled: boolean;
        barBackgroundColor: string;
        barBorderColor: string;
        buttonArrowColor: string;
        buttonBorderColor: string;
        buttonBackgroundColor: string;
        trackBackgroundColor: string;
        trackBorderColor: string;
    };
    navigator: {
        height: number;
        outlineColor: string;
        xAxis: {
            gridLineColor: string;
        };
        handles: {
            backgroundColor: string;
            borderColor: string;
        };
    };
} & {
    navigator?: {
        adaptToUpdatedData: boolean;
    } | undefined;
    _config: any;
    chart: {
        events: {
            render?: (() => void) | undefined;
            load: () => void;
            selection: () => void;
            drilldown: () => void;
            drillup: () => void;
            click: (event: any) => void;
            redraw: () => void;
        };
    };
    title: {
        text: any;
        floating: any;
    };
    subtitle: {
        text: any;
    };
    series: any;
    legend: {
        alignColumns: boolean;
        labelFormatter: () => any;
        navigation: {
            activeColor: string;
            inactiveColor: string;
            style: {
                color: string;
            };
        };
        title: {
            style: {
                color: string;
            };
        };
    } | {
        enabled: boolean;
    };
    tooltip: {
        replaceCellAt?: any;
        insertCellAt?: any;
        positioner?: typeof portraitOrientationTooltipPositioner | undefined;
        shared: boolean;
        splitTooltip: any;
        distance: number;
        style: {
            width: string;
        };
        className: string;
        outside: boolean;
    };
    plotOptions: {
        xrange: {
            stickyTracking: boolean;
        };
        series: {
            events: {
                legendItemClick: (event: Highcharts.SeriesLegendItemClickEventObject | Highcharts.PointLegendItemClickEventObject) => void;
                mouseOver: () => void;
                mouseOut: () => void;
                click: (event: any) => void;
            };
            point: {
                events: {
                    click: () => false;
                };
            };
            marker: {
                states: {
                    hover: {
                        enabled: boolean;
                    };
                    select: {
                        enabled: boolean;
                    };
                };
            } | {
                states?: undefined;
            };
        };
        pie: {
            point: {
                events: {
                    legendItemClick: (event: Highcharts.SeriesLegendItemClickEventObject | Highcharts.PointLegendItemClickEventObject) => void;
                };
            };
        };
    };
    xAxis: {
        crosshair: boolean | {
            width: number;
            color: string;
            zIndex: number;
        };
        labels: {
            formatter: () => any;
        };
        events: {
            setExtremes: () => void;
        };
    };
    yAxis: {
        crosshair: boolean | {
            width: number;
            color: string;
            zIndex: number;
        };
        labels: {
            formatter: () => any;
        };
    };
};
export const chartTypesWithoutCrosshair: string[];
export const chartTypesWithoutYCrosshair: string[];
export const chartTypesWithNativeTooltip: string[];
