import React from 'react';
import { Popup, useVirtualElementRef } from '@gravity-ui/uikit';
import isNil from 'lodash/isNil';
import { block } from '../../../../../utils/cn';
import { useTooltip } from '../../hooks';
import { DefaultContent } from './DefaultContent';
const b = block('d3-tooltip');
export const Tooltip = (props) => {
    const { tooltip, xAxis, yAxis, svgContainer, dispatcher } = props;
    const { hovered, pointerPosition } = useTooltip({ dispatcher, tooltip });
    const containerRect = (svgContainer === null || svgContainer === void 0 ? void 0 : svgContainer.getBoundingClientRect()) || { left: 0, top: 0 };
    const left = ((pointerPosition === null || pointerPosition === void 0 ? void 0 : pointerPosition[0]) || 0) + containerRect.left;
    const top = ((pointerPosition === null || pointerPosition === void 0 ? void 0 : pointerPosition[1]) || 0) + containerRect.top;
    const anchorRef = useVirtualElementRef({ rect: { top, left } });
    const content = React.useMemo(() => {
        var _a;
        if (!hovered) {
            return null;
        }
        const customTooltip = (_a = tooltip.renderer) === null || _a === void 0 ? void 0 : _a.call(tooltip, { hovered });
        return isNil(customTooltip) ? (React.createElement(DefaultContent, { hovered: hovered, xAxis: xAxis, yAxis: yAxis })) : (customTooltip);
    }, [hovered, tooltip, xAxis, yAxis]);
    React.useEffect(() => {
        window.dispatchEvent(new CustomEvent('scroll'));
    }, [left, top]);
    return (hovered === null || hovered === void 0 ? void 0 : hovered.length) ? (React.createElement(Popup, { className: b(), open: true, anchorRef: anchorRef, offset: [0, 20], placement: ['right', 'left', 'top', 'bottom'], modifiers: [{ name: 'preventOverflow', options: { padding: 10, altAxis: true } }] },
        React.createElement("div", { className: b('content') }, content))) : null;
};
