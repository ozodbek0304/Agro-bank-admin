import React from 'react';
import { dateTime } from '@gravity-ui/date-utils';
import get from 'lodash/get';
import { block } from '../../../../../utils/cn';
import { formatNumber } from '../../../../shared';
import { getDataCategoryValue, getWaterfallPointSubtotal } from '../../utils';
const b = block('d3-tooltip');
const DEFAULT_DATE_FORMAT = 'DD.MM.YY';
const getRowData = (fieldName, axis, data) => {
    switch (axis.type) {
        case 'category': {
            const categories = get(axis, 'categories', []);
            return getDataCategoryValue({ axisDirection: fieldName, categories, data });
        }
        case 'datetime': {
            const value = get(data, fieldName);
            if (!value) {
                return undefined;
            }
            return dateTime({ input: value }).format(DEFAULT_DATE_FORMAT);
        }
        case 'linear':
        default: {
            const value = get(data, fieldName);
            return formatNumber(value);
        }
    }
};
const getXRowData = (xAxis, data) => getRowData('x', xAxis, data);
const getYRowData = (yAxis, data) => getRowData('y', yAxis, data);
const getMeasureValue = (data, xAxis, yAxis) => {
    var _a, _b;
    if (data.every((item) => ['pie', 'treemap', 'waterfall'].includes(item.series.type))) {
        return null;
    }
    if (data.some((item) => item.series.type === 'bar-y')) {
        return getYRowData(yAxis, (_a = data[0]) === null || _a === void 0 ? void 0 : _a.data);
    }
    return getXRowData(xAxis, (_b = data[0]) === null || _b === void 0 ? void 0 : _b.data);
};
export const DefaultContent = ({ hovered, xAxis, yAxis }) => {
    const measureValue = getMeasureValue(hovered, xAxis, yAxis);
    return (React.createElement(React.Fragment, null,
        measureValue && React.createElement("div", null, measureValue),
        hovered.map(({ data, series, closest }, i) => {
            const id = `${get(series, 'id')}_${i}`;
            const color = get(series, 'color');
            switch (series.type) {
                case 'scatter':
                case 'line':
                case 'area':
                case 'bar-x': {
                    const value = (React.createElement(React.Fragment, null,
                        series.name,
                        ": ",
                        getYRowData(yAxis, data)));
                    return (React.createElement("div", { key: id, className: b('content-row') },
                        React.createElement("div", { className: b('color'), style: { backgroundColor: color } }),
                        React.createElement("div", null, closest ? React.createElement("b", null, value) : React.createElement("span", null, value))));
                }
                case 'waterfall': {
                    const isTotal = get(data, 'total', false);
                    const subTotal = getWaterfallPointSubtotal(data, series);
                    return (React.createElement("div", { key: `${id}_${get(data, 'x')}` },
                        !isTotal && (React.createElement(React.Fragment, null,
                            React.createElement("div", { key: id, className: b('content-row') },
                                React.createElement("b", null, getXRowData(xAxis, data))),
                            React.createElement("div", { className: b('content-row') },
                                React.createElement("span", null,
                                    series.name,
                                    "\u00A0"),
                                React.createElement("span", null, getYRowData(yAxis, data))))),
                        React.createElement("div", { key: id, className: b('content-row') },
                            isTotal ? 'Total' : 'Subtotal',
                            ": ",
                            subTotal)));
                }
                case 'bar-y': {
                    const value = (React.createElement(React.Fragment, null,
                        series.name,
                        ": ",
                        getXRowData(xAxis, data)));
                    return (React.createElement("div", { key: id, className: b('content-row') },
                        React.createElement("div", { className: b('color'), style: { backgroundColor: color } }),
                        React.createElement("div", null, closest ? React.createElement("b", null, value) : React.createElement("span", null, value))));
                }
                case 'pie':
                case 'treemap': {
                    const seriesData = data;
                    return (React.createElement("div", { key: id, className: b('content-row') },
                        React.createElement("div", { className: b('color'), style: { backgroundColor: color } }),
                        React.createElement("span", null,
                            seriesData.name || seriesData.id,
                            "\u00A0"),
                        React.createElement("span", null, seriesData.value)));
                }
                default: {
                    return null;
                }
            }
        })));
};
