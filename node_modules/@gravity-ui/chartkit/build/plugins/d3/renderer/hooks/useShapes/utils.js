import { select } from 'd3';
import get from 'lodash/get';
import { getDataCategoryValue } from '../../utils';
export function getXValue(args) {
    const { point, xAxis, xScale } = args;
    if (xAxis.type === 'category') {
        const xBandScale = xScale;
        const categories = get(xAxis, 'categories', []);
        const dataCategory = getDataCategoryValue({ axisDirection: 'x', categories, data: point });
        return (xBandScale(dataCategory) || 0) + xBandScale.step() / 2;
    }
    const xLinearScale = xScale;
    return xLinearScale(point.x);
}
export function getYValue(args) {
    const { point, yAxis, yScale } = args;
    if (yAxis.type === 'category') {
        const yBandScale = yScale;
        const categories = get(yAxis, 'categories', []);
        const dataCategory = getDataCategoryValue({ axisDirection: 'y', categories, data: point });
        return (yBandScale(dataCategory) || 0) + yBandScale.step() / 2;
    }
    const yLinearScale = yScale;
    return yLinearScale(point.y);
}
export const shapeKey = (d) => d.id || -1;
export function setActiveState(args) {
    const { element, datum, state, active } = args;
    const elementSelection = select(element);
    if (datum.active !== active) {
        datum.active = active;
        const opacity = datum.active ? null : state === null || state === void 0 ? void 0 : state.opacity;
        elementSelection.attr('opacity', opacity || null);
    }
    return datum;
}
export const getLineDashArray = (dashStyle, strokeWidth = 2) => {
    const value = dashStyle.toLowerCase();
    const arrayValue = value
        .replace('shortdashdotdot', '3,1,1,1,1,1,')
        .replace('shortdashdot', '3,1,1,1')
        .replace('shortdot', '1,1,')
        .replace('shortdash', '3,1,')
        .replace('longdash', '8,3,')
        .replace(/dot/g, '1,3,')
        .replace('dash', '4,3,')
        .replace(/,$/, '')
        .split(',')
        .map((part) => {
        return `${parseInt(part, 10) * strokeWidth}`;
    });
    return arrayValue.join(',').replace(/NaN/g, 'none');
};
