import get from 'lodash/get';
import { DEFAULT_AXIS_LABEL_FONT_SIZE, DEFAULT_AXIS_TYPE, axisLabelsDefaults, yAxisTitleDefaults, } from '../../constants';
import { CHART_SERIES_WITH_VOLUME_ON_Y_AXIS, formatAxisTickLabel, getClosestPointsRange, getHorisontalSvgTextHeight, getLabelsSize, getScaleTicks, getWaterfallPointSubtotal, wrapText, } from '../../utils';
import { createYScale } from '../useAxisScales';
const getAxisLabelMaxWidth = (args) => {
    const { axis, series } = args;
    if (!axis.labels.enabled) {
        return 0;
    }
    const scale = createYScale(axis, series, 1);
    const ticks = getScaleTicks(scale);
    // FIXME: it is necessary to filter data, since we do not draw overlapping ticks
    const step = getClosestPointsRange(axis, ticks);
    const labels = ticks.map((tick) => formatAxisTickLabel({
        axis,
        value: tick,
        step,
    }));
    return getLabelsSize({
        labels,
        style: axis.labels.style,
        rotation: axis.labels.rotation,
    }).maxWidth;
};
function getAxisMin(axis, series) {
    const min = axis === null || axis === void 0 ? void 0 : axis.min;
    if (typeof min === 'undefined' &&
        (series === null || series === void 0 ? void 0 : series.some((s) => CHART_SERIES_WITH_VOLUME_ON_Y_AXIS.includes(s.type)))) {
        return series.reduce((minValue, s) => {
            switch (s.type) {
                case 'waterfall': {
                    const minSubTotal = s.data.reduce((res, d) => Math.min(res, getWaterfallPointSubtotal(d, s) || 0), 0);
                    return Math.min(minValue, minSubTotal);
                }
                default: {
                    const minYValue = s.data.reduce((res, d) => Math.min(res, get(d, 'y', 0)), 0);
                    return Math.min(minValue, minYValue);
                }
            }
        }, 0);
    }
    return min;
}
export const getPreparedYAxis = ({ series, yAxis, height, }) => {
    const axisByPlot = [];
    const axisItems = yAxis || [{}];
    return axisItems.map((axisItem) => {
        const plotIndex = get(axisItem, 'plotIndex', 0);
        const firstPlotAxis = !axisByPlot[plotIndex];
        if (firstPlotAxis) {
            axisByPlot[plotIndex] = [];
        }
        axisByPlot[plotIndex].push(axisItem);
        const defaultAxisPosition = firstPlotAxis ? 'left' : 'right';
        const labelsEnabled = get(axisItem, 'labels.enabled', true);
        const labelsStyle = {
            fontSize: get(axisItem, 'labels.style.fontSize', DEFAULT_AXIS_LABEL_FONT_SIZE),
        };
        const titleText = get(axisItem, 'title.text', '');
        const titleStyle = Object.assign(Object.assign({}, yAxisTitleDefaults.style), get(axisItem, 'title.style'));
        const titleMaxRowsCount = get(axisItem, 'title.maxRowCount', yAxisTitleDefaults.maxRowCount);
        const estimatedTitleRows = wrapText({
            text: titleText,
            style: titleStyle,
            width: height,
        }).slice(0, titleMaxRowsCount);
        const titleSize = getLabelsSize({ labels: [titleText], style: titleStyle });
        const axisType = get(axisItem, 'type', DEFAULT_AXIS_TYPE);
        const preparedAxis = {
            type: axisType,
            labels: {
                enabled: labelsEnabled,
                margin: labelsEnabled
                    ? get(axisItem, 'labels.margin', axisLabelsDefaults.margin)
                    : 0,
                padding: labelsEnabled
                    ? get(axisItem, 'labels.padding', axisLabelsDefaults.padding)
                    : 0,
                dateFormat: get(axisItem, 'labels.dateFormat'),
                numberFormat: get(axisItem, 'labels.numberFormat'),
                style: labelsStyle,
                rotation: get(axisItem, 'labels.rotation', 0),
                width: 0,
                height: 0,
                lineHeight: getHorisontalSvgTextHeight({ text: 'TmpLabel', style: labelsStyle }),
                maxWidth: get(axisItem, 'labels.maxWidth', axisLabelsDefaults.maxWidth),
            },
            lineColor: get(axisItem, 'lineColor'),
            categories: get(axisItem, 'categories'),
            timestamps: get(axisItem, 'timestamps'),
            title: {
                text: titleText,
                margin: get(axisItem, 'title.margin', yAxisTitleDefaults.margin),
                style: titleStyle,
                width: titleSize.maxWidth,
                height: titleSize.maxHeight * estimatedTitleRows.length,
                align: get(axisItem, 'title.align', yAxisTitleDefaults.align),
                maxRowCount: titleMaxRowsCount,
            },
            min: getAxisMin(axisItem, series),
            maxPadding: get(axisItem, 'maxPadding', 0.05),
            grid: {
                enabled: get(axisItem, 'grid.enabled', firstPlotAxis),
            },
            ticks: {
                pixelInterval: get(axisItem, 'ticks.pixelInterval'),
            },
            position: get(axisItem, 'position', defaultAxisPosition),
            plotIndex: get(axisItem, 'plotIndex', 0),
        };
        if (labelsEnabled) {
            preparedAxis.labels.width = getAxisLabelMaxWidth({ axis: preparedAxis, series });
        }
        return preparedAxis;
    });
};
