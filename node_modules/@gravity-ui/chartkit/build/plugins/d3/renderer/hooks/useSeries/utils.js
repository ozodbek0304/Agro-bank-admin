import memoize from 'lodash/memoize';
import { SymbolType } from '../../../../../constants';
import { getRandomCKId } from '../../../../../utils';
import { DEFAULT_LEGEND_SYMBOL_PADDING, DEFAULT_LEGEND_SYMBOL_SIZE } from './constants';
export const getActiveLegendItems = (series) => {
    return series.reduce((acc, s) => {
        if (s.legend.enabled && s.visible) {
            acc.push(s.name);
        }
        return acc;
    }, []);
};
export const getAllLegendItems = (series) => {
    return series.map((s) => s.name);
};
export function prepareLegendSymbol(series, symbolType) {
    var _a;
    const symbolOptions = ((_a = series.legend) === null || _a === void 0 ? void 0 : _a.symbol) || {};
    return {
        shape: 'symbol',
        symbolType: symbolType || SymbolType.Circle,
        width: (symbolOptions === null || symbolOptions === void 0 ? void 0 : symbolOptions.width) || DEFAULT_LEGEND_SYMBOL_SIZE,
        padding: (symbolOptions === null || symbolOptions === void 0 ? void 0 : symbolOptions.padding) || DEFAULT_LEGEND_SYMBOL_PADDING,
    };
}
const getCommonStackId = memoize(getRandomCKId);
export function getSeriesStackId(series) {
    let stackId = series.stackId;
    if (!stackId) {
        stackId = series.stacking ? getCommonStackId() : getRandomCKId();
    }
    return stackId;
}
