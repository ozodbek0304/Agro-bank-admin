import { symbol } from 'd3';
import get from 'lodash/get';
import { SymbolType } from '../../../../../constants';
import { block } from '../../../../../utils/cn';
import { getSymbol } from '../../utils';
const b = block('d3-marker');
const haloClassName = b('halo');
const symbolClassName = b('symbol');
export function renderMarker(selection) {
    const markerSelection = selection
        .attr('class', b('wrapper'))
        .attr('visibility', getMarkerVisibility)
        .attr('transform', (d) => {
        return `translate(${d.point.x},${d.point.y})`;
    });
    markerSelection
        .append('path')
        .attr('class', haloClassName)
        .attr('d', (d) => {
        const series = d.point.series;
        const type = series.marker.states.normal.symbol;
        const radius = get(d.point.data, 'radius', series.marker.states.hover.radius);
        const haloSize = series.marker.states.hover.halo.size;
        return getMarkerSymbol(type, radius + haloSize);
    })
        .attr('fill', (d) => d.point.series.color)
        .attr('opacity', (d) => d.point.series.marker.states.hover.halo.opacity)
        .attr('z-index', -1)
        .attr('visibility', getMarkerHaloVisibility);
    markerSelection
        .append('path')
        .attr('class', symbolClassName)
        .call(setMarker, 'normal')
        .attr('fill', (d) => d.point.series.color);
    return markerSelection;
}
export function getMarkerVisibility(d) {
    const markerStates = d.point.series.marker.states;
    let enabled;
    if (d.hovered) {
        enabled = markerStates.hover.enabled && d.hovered;
    }
    else {
        enabled =
            markerStates.normal.enabled || get(d.point.data, 'marker.states.normal.enabled', false);
    }
    return enabled ? '' : 'hidden';
}
export function getMarkerHaloVisibility(d) {
    const markerStates = d.point.series.marker.states;
    const enabled = markerStates.hover.halo.enabled && d.hovered;
    return enabled ? '' : 'hidden';
}
export function setMarker(selection, state) {
    selection
        .attr('d', (d) => {
        const series = d.point.series;
        const type = series.marker.states.normal.symbol;
        const radius = get(d.point.data, 'radius', series.marker.states[state].radius);
        const size = radius + series.marker.states[state].borderWidth;
        return getMarkerSymbol(type, size);
    })
        .attr('stroke-width', (d) => d.point.series.marker.states[state].borderWidth)
        .attr('stroke', (d) => d.point.series.marker.states[state].borderColor);
}
export function getMarkerSymbol(type = SymbolType.Circle, radius) {
    const symbolFn = getSymbol(type);
    const size = Math.pow(radius, 2) * Math.PI;
    return symbol(symbolFn, size)();
}
export function selectMarkerHalo(parentSelection) {
    return parentSelection.select(`.${haloClassName}`);
}
export function selectMarkerSymbol(parentSelection) {
    return parentSelection.select(`.${symbolClassName}`);
}
