import get from 'lodash/get';
import { calculateNumericProperty, getHorisontalSvgTextHeight } from '../../utils';
const DEFAULT_TITLE_FONT_SIZE = '15px';
const TITLE_TOP_BOTTOM_PADDING = 8;
function preparePlotTitle(args) {
    const { title, plotIndex, plotHeight, chartWidth, gap } = args;
    const titleText = (title === null || title === void 0 ? void 0 : title.text) || '';
    const titleStyle = {
        fontSize: get(title, 'style.fontSize', DEFAULT_TITLE_FONT_SIZE),
        fontWeight: get(title, 'style.fontWeight'),
    };
    const titleHeight = titleText
        ? getHorisontalSvgTextHeight({ text: titleText, style: titleStyle }) +
            TITLE_TOP_BOTTOM_PADDING * 2
        : 0;
    const top = plotIndex * (plotHeight + gap);
    return {
        text: titleText,
        x: chartWidth / 2,
        y: top + titleHeight / 2,
        style: titleStyle,
        height: titleHeight,
    };
}
export function getPlotHeight(args) {
    const { split, boundsHeight, gap } = args;
    const plots = (split === null || split === void 0 ? void 0 : split.plots) || [];
    if (plots.length > 1) {
        return (boundsHeight - gap * (plots.length - 1)) / plots.length;
    }
    return boundsHeight;
}
export const useSplit = (args) => {
    var _a;
    const { split, boundsHeight, chartWidth } = args;
    const splitGap = (_a = calculateNumericProperty({ value: split === null || split === void 0 ? void 0 : split.gap, base: boundsHeight })) !== null && _a !== void 0 ? _a : 0;
    const plotHeight = getPlotHeight({ split: split, boundsHeight, gap: splitGap });
    const plots = (split === null || split === void 0 ? void 0 : split.plots) || [];
    return {
        plots: plots.map((p, index) => {
            const title = preparePlotTitle({
                title: p.title,
                plotIndex: index,
                gap: splitGap,
                plotHeight,
                chartWidth,
            });
            const top = index * (plotHeight + splitGap);
            return {
                top: top + title.height,
                height: plotHeight - title.height,
                title,
            };
        }),
        gap: splitGap,
    };
};
