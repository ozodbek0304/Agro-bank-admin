import get from 'lodash/get';
import merge from 'lodash/merge';
import { getRandomCKId } from '../../../../../utils';
import { getSymbolType } from '../../utils';
import { DEFAULT_HALO_OPTIONS, DEFAULT_POINT_MARKER_OPTIONS } from './constants';
import { prepareLegendSymbol } from './utils';
function prepareMarker(series, seriesOptions, index) {
    const seriesHoverState = get(seriesOptions, 'scatter.states.hover');
    const markerNormalState = Object.assign(Object.assign({}, DEFAULT_POINT_MARKER_OPTIONS), { enabled: true, symbol: series.symbolType || getSymbolType(index) });
    const hoveredMarkerDefaultOptions = {
        enabled: true,
        radius: markerNormalState.radius,
        borderWidth: 1,
        borderColor: '#ffffff',
        halo: DEFAULT_HALO_OPTIONS,
    };
    return {
        states: {
            normal: markerNormalState,
            hover: merge(hoveredMarkerDefaultOptions, seriesHoverState === null || seriesHoverState === void 0 ? void 0 : seriesHoverState.marker),
        },
    };
}
export function prepareScatterSeries(args) {
    const { colorScale, series, seriesOptions, legend } = args;
    return series.map((s, index) => {
        const id = getRandomCKId();
        const name = 'name' in s && s.name ? s.name : '';
        const symbolType = s.symbolType || getSymbolType(index);
        const prepared = {
            id,
            type: s.type,
            name,
            color: get(s, 'color', colorScale(name)),
            visible: get(s, 'visible', true),
            legend: {
                enabled: get(s, 'legend.enabled', legend.enabled),
                symbol: prepareLegendSymbol(s, symbolType),
            },
            data: s.data,
            marker: prepareMarker(s, seriesOptions, index),
            cursor: get(s, 'cursor', null),
            yAxis: get(s, 'yAxis', 0),
        };
        return prepared;
    }, []);
}
