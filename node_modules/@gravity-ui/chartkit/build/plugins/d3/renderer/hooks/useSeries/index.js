import React from 'react';
import { group, scaleOrdinal } from 'd3';
import { DEFAULT_PALETTE } from '../../constants';
import { getSeriesNames } from '../../utils';
import { getLegendComponents, getPreparedLegend } from './prepare-legend';
import { getPreparedOptions } from './prepare-options';
import { prepareSeries } from './prepareSeries';
import { getActiveLegendItems, getAllLegendItems } from './utils';
export const useSeries = (args) => {
    const { chartWidth, chartHeight, chartMargin, legend, preparedYAxis, series: { data: series, options: seriesOptions }, } = args;
    const preparedLegend = React.useMemo(() => getPreparedLegend({ legend, series }), [legend, series]);
    const preparedSeries = React.useMemo(() => {
        const seriesNames = getSeriesNames(series);
        const colorScale = scaleOrdinal(seriesNames, DEFAULT_PALETTE);
        const groupedSeries = group(series, (item) => item.type);
        return Array.from(groupedSeries).reduce((acc, [seriesType, seriesList]) => {
            acc.push(...prepareSeries({
                type: seriesType,
                series: seriesList,
                seriesOptions,
                legend: preparedLegend,
                colorScale,
            }));
            return acc;
        }, []);
    }, [series, seriesOptions, preparedLegend]);
    const preparedSeriesOptions = React.useMemo(() => {
        return getPreparedOptions(seriesOptions);
    }, [seriesOptions]);
    const [activeLegendItems, setActiveLegendItems] = React.useState(getActiveLegendItems(preparedSeries));
    const chartSeries = React.useMemo(() => {
        return preparedSeries.map((singleSeries) => {
            if (singleSeries.legend.enabled) {
                return Object.assign(Object.assign({}, singleSeries), { visible: activeLegendItems.includes(singleSeries.name) });
            }
            return singleSeries;
        });
    }, [preparedSeries, activeLegendItems]);
    const { legendConfig, legendItems } = React.useMemo(() => {
        return getLegendComponents({
            chartHeight,
            chartMargin,
            chartWidth,
            series: chartSeries,
            preparedLegend,
            preparedYAxis,
        });
    }, [chartWidth, chartHeight, chartMargin, chartSeries, preparedLegend, preparedYAxis]);
    const handleLegendItemClick = React.useCallback(({ name, metaKey }) => {
        const allItems = getAllLegendItems(preparedSeries);
        const onlyItemSelected = activeLegendItems.length === 1 && activeLegendItems.includes(name);
        let nextActiveLegendItems;
        if (metaKey && activeLegendItems.includes(name)) {
            nextActiveLegendItems = activeLegendItems.filter((item) => item !== name);
        }
        else if (metaKey && !activeLegendItems.includes(name)) {
            nextActiveLegendItems = activeLegendItems.concat(name);
        }
        else if (onlyItemSelected && allItems.length === 1) {
            nextActiveLegendItems = [];
        }
        else if (onlyItemSelected) {
            nextActiveLegendItems = allItems;
        }
        else {
            nextActiveLegendItems = [name];
        }
        setActiveLegendItems(nextActiveLegendItems);
    }, [preparedSeries, activeLegendItems]);
    // FIXME: remove effect. It initiates extra rerender
    React.useEffect(() => {
        setActiveLegendItems(getActiveLegendItems(preparedSeries));
    }, [preparedSeries]);
    return {
        legendItems,
        legendConfig,
        preparedLegend,
        preparedSeries: chartSeries,
        preparedSeriesOptions,
        handleLegendItemClick,
    };
};
