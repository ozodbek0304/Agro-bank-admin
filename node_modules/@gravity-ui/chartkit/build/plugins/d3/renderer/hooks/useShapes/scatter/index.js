import React from 'react';
import { select } from 'd3';
import get from 'lodash/get';
import { block } from '../../../../../../utils/cn';
import { getMarkerHaloVisibility, renderMarker, selectMarkerHalo, selectMarkerSymbol, setMarker, } from '../marker';
import { setActiveState, shapeKey } from '../utils';
export { prepareScatterData } from './prepare-data';
const b = block('d3-scatter');
export function ScatterSeriesShape(props) {
    const { dispatcher, preparedData, seriesOptions } = props;
    const ref = React.useRef(null);
    React.useEffect(() => {
        if (!ref.current) {
            return () => { };
        }
        const svgElement = select(ref.current);
        const hoverOptions = get(seriesOptions, 'scatter.states.hover');
        const inactiveOptions = get(seriesOptions, 'scatter.states.inactive');
        svgElement.selectAll('*').remove();
        const selection = svgElement
            .selectAll('path')
            .data(preparedData, shapeKey)
            .join('g')
            .call(renderMarker)
            .attr('fill', (d) => d.point.data.color || d.point.series.color || '')
            .attr('opacity', (d) => d.point.opacity)
            .attr('cursor', (d) => d.point.series.cursor);
        const getSelectedPoint = (element) => {
            return select(element).datum();
        };
        svgElement.on('click', (e) => {
            const datum = getSelectedPoint(e.target);
            if (datum) {
                dispatcher.call('click-chart', undefined, { point: datum.point.data, series: datum.point.series }, e);
            }
        });
        const hoverEnabled = hoverOptions === null || hoverOptions === void 0 ? void 0 : hoverOptions.enabled;
        const inactiveEnabled = inactiveOptions === null || inactiveOptions === void 0 ? void 0 : inactiveOptions.enabled;
        dispatcher.on('hover-shape.scatter', (data) => {
            var _a;
            const selected = data === null || data === void 0 ? void 0 : data.find((d) => d.series.type === 'scatter');
            const selectedDataItem = selected === null || selected === void 0 ? void 0 : selected.data;
            const selectedSeriesId = (_a = selected === null || selected === void 0 ? void 0 : selected.series) === null || _a === void 0 ? void 0 : _a.id;
            selection.datum((d, index, list) => {
                const elementSelection = select(list[index]);
                const hovered = Boolean(hoverEnabled && d.point.data === selectedDataItem);
                if (d.hovered !== hovered) {
                    d.hovered = hovered;
                    elementSelection.attr('z-index', hovered ? 999 : null);
                    selectMarkerHalo(elementSelection).attr('visibility', getMarkerHaloVisibility);
                    selectMarkerSymbol(elementSelection).call(setMarker, hovered ? 'hover' : 'normal');
                }
                if (hovered) {
                    elementSelection.raise();
                }
                if (d.point.series.marker.states.normal.enabled) {
                    const isActive = Boolean(!inactiveEnabled ||
                        !selectedSeriesId ||
                        selectedSeriesId === d.point.series.id);
                    setActiveState({
                        element: list[index],
                        state: inactiveOptions,
                        active: isActive,
                        datum: d,
                    });
                }
                return d;
            });
        });
        return () => {
            dispatcher.on('hover-shape.scatter', null);
        };
    }, [dispatcher, preparedData, seriesOptions]);
    return React.createElement("g", { ref: ref, className: b() });
}
