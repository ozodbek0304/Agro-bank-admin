import { BaseType, Selection } from 'd3';
import { MarkerData as AreaMarkerData } from './area/types';
import { MarkerData as LineMarkerData } from './line/types';
import { MarkerData as ScatterMarkerData } from './scatter/types';
type MarkerData = LineMarkerData | AreaMarkerData | ScatterMarkerData;
export declare function renderMarker<T extends MarkerData>(selection: Selection<BaseType | SVGGElement, T, SVGGElement, unknown>): Selection<BaseType | SVGGElement, T, SVGGElement, unknown>;
export declare function getMarkerVisibility(d: MarkerData): "" | "hidden";
export declare function getMarkerHaloVisibility(d: MarkerData): "" | "hidden";
export declare function setMarker<T extends BaseType, D extends MarkerData>(selection: Selection<T, D, BaseType | null, unknown>, state: 'normal' | 'hover'): void;
export declare function getMarkerSymbol(type: "circle" | "diamond" | "square" | "triangle" | "triangle-down" | undefined, radius: number): string | null;
export declare function selectMarkerHalo<T>(parentSelection: Selection<BaseType, T, null, undefined>): Selection<BaseType, T, null, undefined>;
export declare function selectMarkerSymbol<T>(parentSelection: Selection<BaseType, T, null, undefined>): Selection<BaseType, T, null, undefined>;
export {};
