import { getLabelsSize, getLeftPosition } from '../../../utils';
import { getXValue, getYValue } from '../utils';
function getLabelData(point, series, xMax) {
    const text = String(point.data.label || point.data.y);
    const style = series.dataLabels.style;
    const size = getLabelsSize({ labels: [text], style });
    const labelData = {
        text,
        x: point.x,
        y: point.y - series.dataLabels.padding,
        style,
        size: { width: size.maxWidth, height: size.maxHeight },
        textAnchor: 'middle',
        series: series,
        active: true,
    };
    const left = getLeftPosition(labelData);
    if (left < 0) {
        labelData.x = labelData.x + Math.abs(left);
    }
    else {
        const right = left + labelData.size.width;
        if (right > xMax) {
            labelData.x = labelData.x - xMax - right;
        }
    }
    return labelData;
}
export const prepareLineData = (args) => {
    const { series, xAxis, yAxis, xScale, yScale, split } = args;
    const [_xMin, xRangeMax] = xScale.range();
    const xMax = xRangeMax / (1 - xAxis.maxPadding);
    return series.reduce((acc, s) => {
        var _a;
        const yAxisIndex = s.yAxis;
        const seriesYAxis = yAxis[yAxisIndex];
        const yAxisTop = ((_a = split.plots[seriesYAxis.plotIndex]) === null || _a === void 0 ? void 0 : _a.top) || 0;
        const seriesYScale = yScale[s.yAxis];
        const points = s.data.map((d) => ({
            x: getXValue({ point: d, xAxis, xScale }),
            y: yAxisTop + getYValue({ point: d, yAxis: seriesYAxis, yScale: seriesYScale }),
            active: true,
            data: d,
            series: s,
        }));
        let labels = [];
        if (s.dataLabels.enabled) {
            labels = points.map((p) => getLabelData(p, s, xMax));
        }
        let markers = [];
        if (s.marker.states.normal.enabled || s.marker.states.hover.enabled) {
            markers = points.map((p) => ({
                point: p,
                active: true,
                hovered: false,
            }));
        }
        const result = {
            points,
            markers,
            labels,
            color: s.color,
            width: s.lineWidth,
            series: s,
            hovered: false,
            active: true,
            id: s.id,
            dashStyle: s.dashStyle,
            linecap: s.linecap,
            opacity: s.opacity,
        };
        acc.push(result);
        return acc;
    }, []);
};
