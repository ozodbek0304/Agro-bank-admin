import { AxisDomain } from 'd3';
import type { BaseTextStyle, ChartKitWidgetSeries, ChartKitWidgetSeriesData } from '../../../../types';
import { PreparedAxis } from '../hooks';
export * from './math';
export * from './text';
export * from './time';
export * from './axis';
export * from './labels';
export * from './symbol';
export * from './series';
export declare const CHART_SERIES_WITH_VOLUME_ON_Y_AXIS: ChartKitWidgetSeries['type'][];
export declare const CHART_SERIES_WITH_VOLUME_ON_X_AXIS: ChartKitWidgetSeries['type'][];
export type AxisDirection = 'x' | 'y';
type UnknownSeries = {
    type: ChartKitWidgetSeries['type'];
    data: unknown;
};
/**
 * Checks whether the series should be drawn with axes.
 *
 * @param series - The series object to check.
 * @returns `true` if the series should be drawn with axes, `false` otherwise.
 */
export declare function isAxisRelatedSeries(series: UnknownSeries): boolean;
export declare function isSeriesWithNumericalXValues(series: UnknownSeries): series is {
    type: ChartKitWidgetSeries['type'];
    data: {
        x: number;
    }[];
};
export declare function isSeriesWithNumericalYValues(series: UnknownSeries): series is {
    type: ChartKitWidgetSeries['type'];
    data: {
        y: number;
    }[];
};
export declare function isSeriesWithCategoryValues(series: UnknownSeries): series is {
    type: ChartKitWidgetSeries['type'];
    data: {
        category: string;
    }[];
};
export declare const getDomainDataXBySeries: (series: UnknownSeries[]) => unknown[];
export declare function getDefaultMaxXAxisValue(series: UnknownSeries[]): 0 | undefined;
export declare const getDomainDataYBySeries: (series: UnknownSeries[]) => unknown[];
export declare const getSeriesNames: (series: ChartKitWidgetSeries[]) => string[];
export declare const getOnlyVisibleSeries: <T extends {
    visible: boolean;
}>(series: T[]) => T[];
export declare const parseTransformStyle: (style: string | null) => {
    x?: number | undefined;
    y?: number | undefined;
};
export declare const formatAxisTickLabel: (args: {
    axis: PreparedAxis;
    value: AxisDomain;
    step?: number;
}) => string;
/**
 * Calculates the height of a text element in a horizontal SVG layout.
 *
 * @param {Object} args - The arguments for the function.
 * @param {string} args.text - The text to be measured.
 * @param {Partial<BaseTextStyle>} args.style - Optional style properties for the text element.
 * @return {number} The height of the text element.
 */
export declare const getHorisontalSvgTextHeight: (args: {
    text: string;
    style?: Partial<BaseTextStyle>;
}) => number;
export declare const getDataCategoryValue: (args: {
    axisDirection: AxisDirection;
    categories: string[];
    data: ChartKitWidgetSeriesData;
}) => string;
export declare function getClosestPointsRange(axis: PreparedAxis, points: AxisDomain[]): number | undefined;
