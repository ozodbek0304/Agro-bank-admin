import React from 'react';
import YagrComponent from '@gravity-ui/yagr/react';
import isEmpty from 'lodash/isEmpty';
import { i18n } from '../../../i18n';
import { CHARTKIT_ERROR_CODE, ChartKitError } from '../../../libs';
import './polyfills';
import { useWidgetData } from './useWidgetData';
import { checkFocus, detectClickOutside, synchronizeTooltipTablesCellsWidth } from './utils';
import '@gravity-ui/yagr/dist/index.css';
// We need to save order in such state
// eslint-disable-next-line import/order
import './YagrWidget.css';
const YagrWidget = React.forwardRef(function YagrWidget(props, forwardedRef) {
    const { id, data: { data }, onLoad, onRender, onChartLoad, tooltip, } = props;
    const yagrRef = React.useRef(null);
    const [yagr, setYagr] = React.useState();
    if (!data || isEmpty(data)) {
        throw new ChartKitError({
            code: CHARTKIT_ERROR_CODE.NO_DATA,
            message: i18n('error', 'label_no-data'),
        });
    }
    const { config, debug } = useWidgetData(props, id);
    const handleChartLoading = React.useCallback((chart, { renderTime }) => {
        onLoad === null || onLoad === void 0 ? void 0 : onLoad(Object.assign(Object.assign({}, data), { widget: chart, widgetRendering: renderTime }));
        onRender === null || onRender === void 0 ? void 0 : onRender({ renderTime });
        setYagr(chart);
    }, [onLoad, onRender, data, setYagr]);
    const onWindowResize = React.useCallback(() => {
        if (yagr) {
            yagr.reflow();
        }
    }, []);
    React.useImperativeHandle(forwardedRef, () => ({
        reflow() {
            onWindowResize();
        },
    }), [onWindowResize]);
    React.useEffect(() => {
        var _a, _b, _c, _d, _e;
        if (!yagr || ((_b = (_a = yagr.config) === null || _a === void 0 ? void 0 : _a.tooltip) === null || _b === void 0 ? void 0 : _b.virtual)) {
            return;
        }
        const handlers = {
            mouseMove: null,
            mouseDown: null,
        };
        (_c = yagr.plugins.tooltip) === null || _c === void 0 ? void 0 : _c.on('render', (tooltip) => {
            synchronizeTooltipTablesCellsWidth(tooltip);
        });
        (_d = yagr.plugins.tooltip) === null || _d === void 0 ? void 0 : _d.on('pin', (tooltip, { actions }) => {
            handlers.mouseMove = checkFocus({ tooltip, yagr });
            handlers.mouseDown = detectClickOutside({ tooltip, actions, yagr });
            document.addEventListener('mousemove', handlers.mouseMove);
            document.addEventListener('mousedown', handlers.mouseDown);
        });
        (_e = yagr.plugins.tooltip) === null || _e === void 0 ? void 0 : _e.on('unpin', () => {
            if (handlers.mouseMove) {
                document.removeEventListener('mousemove', handlers.mouseMove);
                handlers.mouseMove = null;
            }
            if (handlers.mouseDown) {
                document.removeEventListener('mousedown', handlers.mouseDown);
                handlers.mouseDown = null;
            }
        });
    }, [yagr]);
    React.useLayoutEffect(() => {
        onChartLoad === null || onChartLoad === void 0 ? void 0 : onChartLoad({ widget: yagr });
    }, [yagr, onChartLoad]);
    return (React.createElement(React.Fragment, null,
        tooltip &&
            yagr &&
            tooltip({
                yagr,
            }),
        React.createElement(YagrComponent, { ref: yagrRef, id: id, config: config, debug: debug, onChartLoad: handleChartLoading })));
});
export default YagrWidget;
