import { dateTime } from '@gravity-ui/date-utils';
import { formatTooltip } from './tooltip';
const calcOption = (d) => {
    return typeof d === 'object' && d !== null
        ? Object.values(d).reduce((_, t) => {
            return t;
        })
        : d;
};
const getSeriesColorProperty = (args) => {
    var _a;
    const { data, userData, row, rowIndex } = args;
    const userSeries = userData.graphs[rowIndex];
    const lineColor = (_a = data.yagr.getSeriesById(row.id)) === null || _a === void 0 ? void 0 : _a.lineColor;
    let seriesColor = row.color;
    switch (userSeries === null || userSeries === void 0 ? void 0 : userSeries.legendColorKey) {
        case 'lineColor': {
            if (lineColor) {
                seriesColor = lineColor;
            }
            break;
        }
        case 'color':
        default: {
            seriesColor = row.color;
        }
    }
    return seriesColor;
};
/*
 * Default tooltip renderer.
 * Adapter between native Yagr tooltip config and ChartKit
 * tooltip renderer.
 */
export const getRenderTooltip = (userData) => (data) => {
    const { timeZone } = userData;
    const cfg = data.yagr.config;
    const timeMultiplier = cfg.chart.timeMultiplier || 1;
    const opts = data.options;
    const { x, state } = data;
    let sumTotal = 0;
    const rows = Object.values(data.scales).reduce((acc, scale) => {
        sumTotal += scale.sum || 0;
        return acc.concat(scale.rows);
    }, []);
    const lines = rows.length;
    const sum = calcOption(opts.sum);
    const maxLines = calcOption(opts.maxLines);
    const valueFormatter = calcOption(opts.value);
    // eslint-disable-next-line no-nested-ternary
    const hiddenRowsNumber = state.pinned
        ? undefined
        : lines > maxLines
            ? Math.abs(maxLines - lines)
            : undefined;
    const hiddenRowsSum = hiddenRowsNumber
        ? valueFormatter(rows
            .slice(-hiddenRowsNumber)
            .reduce((acc, { originalValue }) => acc + (originalValue || 0), 0))
        : undefined;
    const tooltipFormatOptions = {
        activeRowAlwaysFirstInTooltip: rows.length > 1,
        tooltipHeader: dateTime({ input: x / timeMultiplier, timeZone }).format('DD MMMM YYYY HH:mm:ss'),
        shared: true,
        lines: rows.map((row, i) => (Object.assign(Object.assign({}, row), { seriesName: row.name || 'Serie ' + (i + 1), seriesColor: getSeriesColorProperty({ data, userData, row, rowIndex: i }), selectedSeries: row.active, seriesIdx: row.seriesIdx, percentValue: typeof row.transformed === 'number' ? row.transformed.toFixed(1) : '' }))),
        withPercent: calcOption(opts.percent),
        hiddenRowsNumber: hiddenRowsNumber,
        hiddenRowsSum,
    };
    if (sum) {
        tooltipFormatOptions.sum = valueFormatter(sumTotal);
    }
    return formatTooltip(tooltipFormatOptions, {
        lastVisibleRowIndex: state.pinned ? rows.length - 1 : maxLines - 1,
    });
};
